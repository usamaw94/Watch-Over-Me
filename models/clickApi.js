"use strict";
/**
 * ClickSend v3 API
 *  This is an official SDK for [ClickSend](https://clicksend.com)  Below you will find a current list of the available methods for clicksend.  *NOTE: You will need to create a free account to use the API. You can register [here](https://dashboard.clicksend.com/#/signup/step1/)..*
 *
 * OpenAPI spec version: 3.1
 * Contact: support@clicksend.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var localVarRequest = require("request");
var Promise = require("bluebird");
var defaultBasePath = 'https://rest.clicksend.com/v3';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
var primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
var ObjectSerializer = /** @class */ (function () {
    function ObjectSerializer() {
    }
    ObjectSerializer.findCorrectType = function (data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            var discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    };
    ObjectSerializer.serialize = function (data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            var subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // get the map for the correct type.
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            var instance = {};
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    };
    ObjectSerializer.deserialize = function (data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            var subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            var instance = new typeMap[type]();
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    };
    return ObjectSerializer;
}());
/**
* Complete account details needed for the user.
*/
var Account = /** @class */ (function () {
    function Account() {
    }
    Account.getAttributeTypeMap = function () {
        return Account.attributeTypeMap;
    };
    Account.discriminator = "classType";
    Account.attributeTypeMap = [
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        },
        {
            "name": "userPhone",
            "baseName": "user_phone",
            "type": "string"
        },
        {
            "name": "userEmail",
            "baseName": "user_email",
            "type": "string"
        },
        {
            "name": "userFirstName",
            "baseName": "user_first_name",
            "type": "string"
        },
        {
            "name": "userLastName",
            "baseName": "user_last_name",
            "type": "string"
        },
        {
            "name": "accountName",
            "baseName": "account_name",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        }
    ];
    return Account;
}());
exports.Account = Account;
var AccountForgotPasswordVerify = /** @class */ (function () {
    function AccountForgotPasswordVerify() {
    }
    AccountForgotPasswordVerify.getAttributeTypeMap = function () {
        return AccountForgotPasswordVerify.attributeTypeMap;
    };
    AccountForgotPasswordVerify.discriminator = "classType";
    AccountForgotPasswordVerify.attributeTypeMap = [
        {
            "name": "subaccountId",
            "baseName": "subaccount_id",
            "type": "number"
        },
        {
            "name": "activationToken",
            "baseName": "activation_token",
            "type": "string"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        }
    ];
    return AccountForgotPasswordVerify;
}());
exports.AccountForgotPasswordVerify = AccountForgotPasswordVerify;
/**
* Verifies an account by token that should have been sent to the user's phone
*/
var AccountVerify = /** @class */ (function () {
    function AccountVerify() {
    }
    AccountVerify.getAttributeTypeMap = function () {
        return AccountVerify.attributeTypeMap;
    };
    AccountVerify.discriminator = "classType";
    AccountVerify.attributeTypeMap = [
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "userPhone",
            "baseName": "user_phone",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }
    ];
    return AccountVerify;
}());
exports.AccountVerify = AccountVerify;
/**
* Base model for all address-related objects.
*/
var Address = /** @class */ (function () {
    function Address() {
    }
    Address.getAttributeTypeMap = function () {
        return Address.attributeTypeMap;
    };
    Address.discriminator = "classType";
    Address.attributeTypeMap = [
        {
            "name": "addressName",
            "baseName": "address_name",
            "type": "string"
        },
        {
            "name": "addressLine1",
            "baseName": "address_line_1",
            "type": "string"
        },
        {
            "name": "addressCity",
            "baseName": "address_city",
            "type": "string"
        },
        {
            "name": "addressPostalCode",
            "baseName": "address_postal_code",
            "type": "string"
        },
        {
            "name": "addressCountry",
            "baseName": "address_country",
            "type": "string"
        },
        {
            "name": "addressLine2",
            "baseName": "address_line_2",
            "type": "string"
        },
        {
            "name": "addressState",
            "baseName": "address_state",
            "type": "string"
        }
    ];
    return Address;
}());
exports.Address = Address;
/**
* Email attachment
*/
var Attachment = /** @class */ (function () {
    function Attachment() {
    }
    Attachment.getAttributeTypeMap = function () {
        return Attachment.attributeTypeMap;
    };
    Attachment.discriminator = "classType";
    Attachment.attributeTypeMap = [
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "filename",
            "baseName": "filename",
            "type": "string"
        },
        {
            "name": "disposition",
            "baseName": "disposition",
            "type": "string"
        },
        {
            "name": "contentId",
            "baseName": "content_id",
            "type": "string"
        }
    ];
    return Attachment;
}());
exports.Attachment = Attachment;
/**
* Contains all details for the main contact.
*/
var Contact = /** @class */ (function () {
    function Contact() {
    }
    Contact.getAttributeTypeMap = function () {
        return Contact.attributeTypeMap;
    };
    Contact.discriminator = "classType";
    Contact.attributeTypeMap = [
        {
            "name": "phoneNumber",
            "baseName": "phone_number",
            "type": "string"
        },
        {
            "name": "custom1",
            "baseName": "custom_1",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "faxNumber",
            "baseName": "fax_number",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "addressLine1",
            "baseName": "address_line_1",
            "type": "string"
        },
        {
            "name": "addressLine2",
            "baseName": "address_line_2",
            "type": "string"
        },
        {
            "name": "addressCity",
            "baseName": "address_city",
            "type": "string"
        },
        {
            "name": "addressState",
            "baseName": "address_state",
            "type": "string"
        },
        {
            "name": "addressPostalCode",
            "baseName": "address_postal_code",
            "type": "string"
        },
        {
            "name": "addressCountry",
            "baseName": "address_country",
            "type": "string"
        },
        {
            "name": "organizationName",
            "baseName": "organization_name",
            "type": "string"
        },
        {
            "name": "custom2",
            "baseName": "custom_2",
            "type": "string"
        },
        {
            "name": "custom3",
            "baseName": "custom_3",
            "type": "string"
        },
        {
            "name": "custom4",
            "baseName": "custom_4",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        }
    ];
    return Contact;
}());
exports.Contact = Contact;
/**
* Your contact list.
*/
var ContactList = /** @class */ (function () {
    function ContactList() {
    }
    ContactList.getAttributeTypeMap = function () {
        return ContactList.attributeTypeMap;
    };
    ContactList.discriminator = "classType";
    ContactList.attributeTypeMap = [
        {
            "name": "listName",
            "baseName": "list_name",
            "type": "string"
        }
    ];
    return ContactList;
}());
exports.ContactList = ContactList;
/**
* Contact list import model
*/
var ContactListImport = /** @class */ (function () {
    function ContactListImport() {
    }
    ContactListImport.getAttributeTypeMap = function () {
        return ContactListImport.attributeTypeMap;
    };
    ContactListImport.discriminator = "classType";
    ContactListImport.attributeTypeMap = [
        {
            "name": "fileUrl",
            "baseName": "file_url",
            "type": "string"
        },
        {
            "name": "fieldOrder",
            "baseName": "field_order",
            "type": "Array<string>"
        }
    ];
    return ContactListImport;
}());
exports.ContactListImport = ContactListImport;
/**
* Credit card model
*/
var CreditCard = /** @class */ (function () {
    function CreditCard() {
    }
    CreditCard.getAttributeTypeMap = function () {
        return CreditCard.attributeTypeMap;
    };
    CreditCard.discriminator = "classType";
    CreditCard.attributeTypeMap = [
        {
            "name": "number",
            "baseName": "number",
            "type": "string"
        },
        {
            "name": "expiryMonth",
            "baseName": "expiry_month",
            "type": "number"
        },
        {
            "name": "expiryYear",
            "baseName": "expiry_year",
            "type": "number"
        },
        {
            "name": "cvc",
            "baseName": "cvc",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "bankName",
            "baseName": "bank_name",
            "type": "string"
        }
    ];
    return CreditCard;
}());
exports.CreditCard = CreditCard;
/**
* All dates before specified timestam.
*/
var DateBefore = /** @class */ (function () {
    function DateBefore() {
    }
    DateBefore.getAttributeTypeMap = function () {
        return DateBefore.attributeTypeMap;
    };
    DateBefore.discriminator = "classType";
    DateBefore.attributeTypeMap = [
        {
            "name": "dateBefore",
            "baseName": "date_before",
            "type": "number"
        }
    ];
    return DateBefore;
}());
exports.DateBefore = DateBefore;
/**
* Issues with message delivery
*/
var DeliveryIssue = /** @class */ (function () {
    function DeliveryIssue() {
    }
    DeliveryIssue.getAttributeTypeMap = function () {
        return DeliveryIssue.attributeTypeMap;
    };
    DeliveryIssue.discriminator = "classType";
    DeliveryIssue.attributeTypeMap = [
        {
            "name": "messageId",
            "baseName": "message_id",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "clientComments",
            "baseName": "client_comments",
            "type": "string"
        },
        {
            "name": "emailAddress",
            "baseName": "email_address",
            "type": "string"
        }
    ];
    return DeliveryIssue;
}());
exports.DeliveryIssue = DeliveryIssue;
/**
* Model for a Delivery Receipt
*/
var DeliveryReceiptRule = /** @class */ (function () {
    function DeliveryReceiptRule() {
    }
    DeliveryReceiptRule.getAttributeTypeMap = function () {
        return DeliveryReceiptRule.attributeTypeMap;
    };
    DeliveryReceiptRule.discriminator = "classType";
    DeliveryReceiptRule.attributeTypeMap = [
        {
            "name": "ruleName",
            "baseName": "rule_name",
            "type": "string"
        },
        {
            "name": "matchType",
            "baseName": "match_type",
            "type": "number"
        },
        {
            "name": "action",
            "baseName": "action",
            "type": "string"
        },
        {
            "name": "actionAddress",
            "baseName": "action_address",
            "type": "string"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "number"
        }
    ];
    return DeliveryReceiptRule;
}());
exports.DeliveryReceiptRule = DeliveryReceiptRule;
/**
* Send Email
*/
var Email = /** @class */ (function () {
    function Email() {
    }
    Email.getAttributeTypeMap = function () {
        return Email.attributeTypeMap;
    };
    Email.discriminator = "classType";
    Email.attributeTypeMap = [
        {
            "name": "to",
            "baseName": "to",
            "type": "Array<EmailRecipient>"
        },
        {
            "name": "cc",
            "baseName": "cc",
            "type": "Array<EmailRecipient>"
        },
        {
            "name": "bcc",
            "baseName": "bcc",
            "type": "Array<EmailRecipient>"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "EmailFrom"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<Attachment>"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "number"
        }
    ];
    return Email;
}());
exports.Email = Email;
var EmailAddress = /** @class */ (function () {
    function EmailAddress() {
    }
    EmailAddress.getAttributeTypeMap = function () {
        return EmailAddress.attributeTypeMap;
    };
    EmailAddress.discriminator = undefined;
    EmailAddress.attributeTypeMap = [
        {
            "name": "emailAddress",
            "baseName": "email_address",
            "type": "string"
        }
    ];
    return EmailAddress;
}());
exports.EmailAddress = EmailAddress;
/**
* Campaign Model for Email
*/
var EmailCampaign = /** @class */ (function () {
    function EmailCampaign() {
    }
    EmailCampaign.getAttributeTypeMap = function () {
        return EmailCampaign.attributeTypeMap;
    };
    EmailCampaign.discriminator = "classType";
    EmailCampaign.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "fromEmailAddressId",
            "baseName": "from_email_address_id",
            "type": "number"
        },
        {
            "name": "fromName",
            "baseName": "from_name",
            "type": "string"
        },
        {
            "name": "templateId",
            "baseName": "template_id",
            "type": "number"
        },
        {
            "name": "listId",
            "baseName": "list_id",
            "type": "number"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "number"
        }
    ];
    return EmailCampaign;
}());
exports.EmailCampaign = EmailCampaign;
/**
* From Email object.
*/
var EmailFrom = /** @class */ (function () {
    function EmailFrom() {
    }
    EmailFrom.getAttributeTypeMap = function () {
        return EmailFrom.attributeTypeMap;
    };
    EmailFrom.discriminator = undefined;
    EmailFrom.attributeTypeMap = [
        {
            "name": "emailAddressId",
            "baseName": "email_address_id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return EmailFrom;
}());
exports.EmailFrom = EmailFrom;
/**
* Recipient of an email, either To, Cc, or Bcc.
*/
var EmailRecipient = /** @class */ (function () {
    function EmailRecipient() {
    }
    EmailRecipient.getAttributeTypeMap = function () {
        return EmailRecipient.attributeTypeMap;
    };
    EmailRecipient.discriminator = "classType";
    EmailRecipient.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return EmailRecipient;
}());
exports.EmailRecipient = EmailRecipient;
/**
* Email-to-SMS Allowed Address
*/
var EmailSMSAddress = /** @class */ (function () {
    function EmailSMSAddress() {
    }
    EmailSMSAddress.getAttributeTypeMap = function () {
        return EmailSMSAddress.attributeTypeMap;
    };
    EmailSMSAddress.discriminator = "classType";
    EmailSMSAddress.attributeTypeMap = [
        {
            "name": "emailAddress",
            "baseName": "email_address",
            "type": "string"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "string"
        },
        {
            "name": "subaccountId",
            "baseName": "subaccount_id",
            "type": "string"
        }
    ];
    return EmailSMSAddress;
}());
exports.EmailSMSAddress = EmailSMSAddress;
/**
* Model for Email Templates
*/
var EmailTemplateNew = /** @class */ (function () {
    function EmailTemplateNew() {
    }
    EmailTemplateNew.getAttributeTypeMap = function () {
        return EmailTemplateNew.attributeTypeMap;
    };
    EmailTemplateNew.discriminator = "classType";
    EmailTemplateNew.attributeTypeMap = [
        {
            "name": "templateName",
            "baseName": "template_name",
            "type": "string"
        },
        {
            "name": "templateIdMaster",
            "baseName": "template_id_master",
            "type": "number"
        }
    ];
    return EmailTemplateNew;
}());
exports.EmailTemplateNew = EmailTemplateNew;
/**
* Model for Email Templates
*/
var EmailTemplateUpdate = /** @class */ (function () {
    function EmailTemplateUpdate() {
    }
    EmailTemplateUpdate.getAttributeTypeMap = function () {
        return EmailTemplateUpdate.attributeTypeMap;
    };
    EmailTemplateUpdate.discriminator = "classType";
    EmailTemplateUpdate.attributeTypeMap = [
        {
            "name": "templateName",
            "baseName": "template_name",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        }
    ];
    return EmailTemplateUpdate;
}());
exports.EmailTemplateUpdate = EmailTemplateUpdate;
/**
* Base model for Fax Messages
*/
var FaxMessage = /** @class */ (function () {
    function FaxMessage() {
    }
    FaxMessage.getAttributeTypeMap = function () {
        return FaxMessage.attributeTypeMap;
    };
    FaxMessage.discriminator = "classType";
    FaxMessage.attributeTypeMap = [
        {
            "name": "source",
            "baseName": "source",
            "type": "string"
        },
        {
            "name": "to",
            "baseName": "to",
            "type": "string"
        },
        {
            "name": "listId",
            "baseName": "list_id",
            "type": "number"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "string"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "number"
        },
        {
            "name": "customString",
            "baseName": "custom_string",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "fromEmail",
            "baseName": "from_email",
            "type": "string"
        }
    ];
    return FaxMessage;
}());
exports.FaxMessage = FaxMessage;
/**
* Array of FaxMessage items
*/
var FaxMessageCollection = /** @class */ (function () {
    function FaxMessageCollection() {
    }
    FaxMessageCollection.getAttributeTypeMap = function () {
        return FaxMessageCollection.attributeTypeMap;
    };
    FaxMessageCollection.discriminator = "classType";
    FaxMessageCollection.attributeTypeMap = [
        {
            "name": "messages",
            "baseName": "messages",
            "type": "Array<FaxMessage>"
        },
        {
            "name": "fileUrl",
            "baseName": "file_url",
            "type": "string"
        }
    ];
    return FaxMessageCollection;
}());
exports.FaxMessageCollection = FaxMessageCollection;
/**
* Contains all details for the main contact.
*/
var Fields = /** @class */ (function () {
    function Fields() {
    }
    Fields.getAttributeTypeMap = function () {
        return Fields.attributeTypeMap;
    };
    Fields.discriminator = "classType";
    Fields.attributeTypeMap = [
        {
            "name": "fields",
            "baseName": "fields",
            "type": "FieldsFields"
        }
    ];
    return Fields;
}());
exports.Fields = Fields;
/**
* From Email object.
*/
var FieldsFields = /** @class */ (function () {
    function FieldsFields() {
    }
    FieldsFields.getAttributeTypeMap = function () {
        return FieldsFields.attributeTypeMap;
    };
    FieldsFields.discriminator = undefined;
    FieldsFields.attributeTypeMap = [
        {
            "name": "phoneNumber",
            "baseName": "phone_number",
            "type": "string"
        },
        {
            "name": "custom1",
            "baseName": "custom_1",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "faxNumber",
            "baseName": "fax_number",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "addressLine1",
            "baseName": "address_line_1",
            "type": "string"
        },
        {
            "name": "addressLine2",
            "baseName": "address_line_2",
            "type": "string"
        },
        {
            "name": "addressCity",
            "baseName": "address_city",
            "type": "string"
        },
        {
            "name": "addressState",
            "baseName": "address_state",
            "type": "string"
        },
        {
            "name": "addressPostalCode",
            "baseName": "address_postal_code",
            "type": "string"
        },
        {
            "name": "addressCountry",
            "baseName": "address_country",
            "type": "string"
        },
        {
            "name": "organizationName",
            "baseName": "organization_name",
            "type": "string"
        },
        {
            "name": "custom2",
            "baseName": "custom_2",
            "type": "string"
        },
        {
            "name": "custom3",
            "baseName": "custom_3",
            "type": "string"
        },
        {
            "name": "custom4",
            "baseName": "custom_4",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        }
    ];
    return FieldsFields;
}());
exports.FieldsFields = FieldsFields;
var ForgotPassword = /** @class */ (function () {
    function ForgotPassword() {
    }
    ForgotPassword.getAttributeTypeMap = function () {
        return ForgotPassword.attributeTypeMap;
    };
    ForgotPassword.discriminator = undefined;
    ForgotPassword.attributeTypeMap = [
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        }
    ];
    return ForgotPassword;
}());
exports.ForgotPassword = ForgotPassword;
var ForgotUsername = /** @class */ (function () {
    function ForgotUsername() {
    }
    ForgotUsername.getAttributeTypeMap = function () {
        return ForgotUsername.attributeTypeMap;
    };
    ForgotUsername.discriminator = undefined;
    ForgotUsername.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "phoneNumber",
            "baseName": "phone_number",
            "type": "string"
        }
    ];
    return ForgotUsername;
}());
exports.ForgotUsername = ForgotUsername;
/**
* Model for Inbound FAX Rules
*/
var InboundFaxRule = /** @class */ (function () {
    function InboundFaxRule() {
    }
    InboundFaxRule.getAttributeTypeMap = function () {
        return InboundFaxRule.attributeTypeMap;
    };
    InboundFaxRule.discriminator = "classType";
    InboundFaxRule.attributeTypeMap = [
        {
            "name": "dedicatedNumber",
            "baseName": "dedicated_number",
            "type": "string"
        },
        {
            "name": "ruleName",
            "baseName": "rule_name",
            "type": "string"
        },
        {
            "name": "action",
            "baseName": "action",
            "type": "string"
        },
        {
            "name": "actionAddress",
            "baseName": "action_address",
            "type": "string"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "number"
        }
    ];
    return InboundFaxRule;
}());
exports.InboundFaxRule = InboundFaxRule;
/**
* Model for Inbound SMS Rules
*/
var InboundSMSRule = /** @class */ (function () {
    function InboundSMSRule() {
    }
    InboundSMSRule.getAttributeTypeMap = function () {
        return InboundSMSRule.attributeTypeMap;
    };
    InboundSMSRule.discriminator = "classType";
    InboundSMSRule.attributeTypeMap = [
        {
            "name": "dedicatedNumber",
            "baseName": "dedicated_number",
            "type": "string"
        },
        {
            "name": "ruleName",
            "baseName": "rule_name",
            "type": "string"
        },
        {
            "name": "messageSearchType",
            "baseName": "message_search_type",
            "type": "number"
        },
        {
            "name": "messageSearchTerm",
            "baseName": "message_search_term",
            "type": "string"
        },
        {
            "name": "action",
            "baseName": "action",
            "type": "string"
        },
        {
            "name": "actionAddress",
            "baseName": "action_address",
            "type": "string"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "number"
        }
    ];
    return InboundSMSRule;
}());
exports.InboundSMSRule = InboundSMSRule;
/**
* Campaign Model for MMS
*/
var MmsCampaign = /** @class */ (function () {
    function MmsCampaign() {
    }
    MmsCampaign.getAttributeTypeMap = function () {
        return MmsCampaign.attributeTypeMap;
    };
    MmsCampaign.discriminator = "classType";
    MmsCampaign.attributeTypeMap = [
        {
            "name": "listId",
            "baseName": "list_id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "string"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "number"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "mediaFile",
            "baseName": "media_file",
            "type": "string"
        }
    ];
    return MmsCampaign;
}());
exports.MmsCampaign = MmsCampaign;
/**
* Single MMS message model
*/
var MmsMessage = /** @class */ (function () {
    function MmsMessage() {
    }
    MmsMessage.getAttributeTypeMap = function () {
        return MmsMessage.attributeTypeMap;
    };
    MmsMessage.discriminator = "classType";
    MmsMessage.attributeTypeMap = [
        {
            "name": "to",
            "baseName": "to",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "string"
        },
        {
            "name": "listId",
            "baseName": "list_id",
            "type": "number"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "number"
        },
        {
            "name": "customString",
            "baseName": "custom_string",
            "type": "string"
        },
        {
            "name": "fromEmail",
            "baseName": "from_email",
            "type": "string"
        }
    ];
    return MmsMessage;
}());
exports.MmsMessage = MmsMessage;
/**
* Array of MmsMessage items
*/
var MmsMessageCollection = /** @class */ (function () {
    function MmsMessageCollection() {
    }
    MmsMessageCollection.getAttributeTypeMap = function () {
        return MmsMessageCollection.attributeTypeMap;
    };
    MmsMessageCollection.discriminator = "classType";
    MmsMessageCollection.attributeTypeMap = [
        {
            "name": "mediaFile",
            "baseName": "media_file",
            "type": "string"
        },
        {
            "name": "messages",
            "baseName": "messages",
            "type": "Array<MmsMessage>"
        }
    ];
    return MmsMessageCollection;
}());
exports.MmsMessageCollection = MmsMessageCollection;
/**
* PostLetter model
*/
var PostLetter = /** @class */ (function () {
    function PostLetter() {
    }
    PostLetter.getAttributeTypeMap = function () {
        return PostLetter.attributeTypeMap;
    };
    PostLetter.discriminator = "classType";
    PostLetter.attributeTypeMap = [
        {
            "name": "fileUrl",
            "baseName": "file_url",
            "type": "string"
        },
        {
            "name": "priorityPost",
            "baseName": "priority_post",
            "type": "number"
        },
        {
            "name": "recipients",
            "baseName": "recipients",
            "type": "Array<PostRecipient>"
        },
        {
            "name": "templateUsed",
            "baseName": "template_used",
            "type": "number"
        },
        {
            "name": "duplex",
            "baseName": "duplex",
            "type": "number"
        },
        {
            "name": "colour",
            "baseName": "colour",
            "type": "number"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "string"
        }
    ];
    return PostLetter;
}());
exports.PostLetter = PostLetter;
/**
* PostPostcard model
*/
var PostPostcard = /** @class */ (function () {
    function PostPostcard() {
    }
    PostPostcard.getAttributeTypeMap = function () {
        return PostPostcard.attributeTypeMap;
    };
    PostPostcard.discriminator = "classType";
    PostPostcard.attributeTypeMap = [
        {
            "name": "fileUrls",
            "baseName": "file_urls",
            "type": "Array<string>"
        },
        {
            "name": "recipients",
            "baseName": "recipients",
            "type": "Array<PostRecipient>"
        }
    ];
    return PostPostcard;
}());
exports.PostPostcard = PostPostcard;
/**
* PostRecipient model
*/
var PostRecipient = /** @class */ (function () {
    function PostRecipient() {
    }
    PostRecipient.getAttributeTypeMap = function () {
        return PostRecipient.attributeTypeMap;
    };
    PostRecipient.discriminator = "classType";
    PostRecipient.attributeTypeMap = [
        {
            "name": "addressName",
            "baseName": "address_name",
            "type": "string"
        },
        {
            "name": "addressLine1",
            "baseName": "address_line_1",
            "type": "string"
        },
        {
            "name": "addressLine2",
            "baseName": "address_line_2",
            "type": "string"
        },
        {
            "name": "addressCity",
            "baseName": "address_city",
            "type": "string"
        },
        {
            "name": "addressState",
            "baseName": "address_state",
            "type": "string"
        },
        {
            "name": "addressPostalCode",
            "baseName": "address_postal_code",
            "type": "string"
        },
        {
            "name": "addressCountry",
            "baseName": "address_country",
            "type": "string"
        },
        {
            "name": "returnAddressId",
            "baseName": "return_address_id",
            "type": "number"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "number"
        }
    ];
    return PostRecipient;
}());
exports.PostRecipient = PostRecipient;
/**
* ResellerAccount model
*/
var ResellerAccount = /** @class */ (function () {
    function ResellerAccount() {
    }
    ResellerAccount.getAttributeTypeMap = function () {
        return ResellerAccount.attributeTypeMap;
    };
    ResellerAccount.discriminator = "classType";
    ResellerAccount.attributeTypeMap = [
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        },
        {
            "name": "userEmail",
            "baseName": "user_email",
            "type": "string"
        },
        {
            "name": "userPhone",
            "baseName": "user_phone",
            "type": "string"
        },
        {
            "name": "userFirstName",
            "baseName": "user_first_name",
            "type": "string"
        },
        {
            "name": "userLastName",
            "baseName": "user_last_name",
            "type": "string"
        },
        {
            "name": "accountName",
            "baseName": "account_name",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        }
    ];
    return ResellerAccount;
}());
exports.ResellerAccount = ResellerAccount;
/**
* ResellerAccountTransferCredit model
*/
var ResellerAccountTransferCredit = /** @class */ (function () {
    function ResellerAccountTransferCredit() {
    }
    ResellerAccountTransferCredit.getAttributeTypeMap = function () {
        return ResellerAccountTransferCredit.attributeTypeMap;
    };
    ResellerAccountTransferCredit.discriminator = "classType";
    ResellerAccountTransferCredit.attributeTypeMap = [
        {
            "name": "clientUserId",
            "baseName": "client_user_id",
            "type": "number"
        },
        {
            "name": "balance",
            "baseName": "balance",
            "type": "number"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        }
    ];
    return ResellerAccountTransferCredit;
}());
exports.ResellerAccountTransferCredit = ResellerAccountTransferCredit;
/**
* Campaign Model for SMS
*/
var SmsCampaign = /** @class */ (function () {
    function SmsCampaign() {
    }
    SmsCampaign.getAttributeTypeMap = function () {
        return SmsCampaign.attributeTypeMap;
    };
    SmsCampaign.discriminator = "classType";
    SmsCampaign.attributeTypeMap = [
        {
            "name": "listId",
            "baseName": "list_id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "string"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "number"
        },
        {
            "name": "urlToShorten",
            "baseName": "url_to_shorten",
            "type": "string"
        }
    ];
    return SmsCampaign;
}());
exports.SmsCampaign = SmsCampaign;
/**
* SmsMessage model
*/
var SmsMessage = /** @class */ (function () {
    function SmsMessage() {
    }
    SmsMessage.getAttributeTypeMap = function () {
        return SmsMessage.attributeTypeMap;
    };
    SmsMessage.discriminator = "classType";
    SmsMessage.attributeTypeMap = [
        {
            "name": "from",
            "baseName": "from",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "to",
            "baseName": "to",
            "type": "string"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "string"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "number"
        },
        {
            "name": "customString",
            "baseName": "custom_string",
            "type": "string"
        },
        {
            "name": "listId",
            "baseName": "list_id",
            "type": "number"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "fromEmail",
            "baseName": "from_email",
            "type": "string"
        }
    ];
    return SmsMessage;
}());
exports.SmsMessage = SmsMessage;
/**
* Array of SmsMessage items
*/
var SmsMessageCollection = /** @class */ (function () {
    function SmsMessageCollection() {
    }
    SmsMessageCollection.getAttributeTypeMap = function () {
        return SmsMessageCollection.attributeTypeMap;
    };
    SmsMessageCollection.discriminator = "classType";
    SmsMessageCollection.attributeTypeMap = [
        {
            "name": "messages",
            "baseName": "messages",
            "type": "Array<SmsMessage>"
        }
    ];
    return SmsMessageCollection;
}());
exports.SmsMessageCollection = SmsMessageCollection;
/**
* SmsTemplate model
*/
var SmsTemplate = /** @class */ (function () {
    function SmsTemplate() {
    }
    SmsTemplate.getAttributeTypeMap = function () {
        return SmsTemplate.attributeTypeMap;
    };
    SmsTemplate.discriminator = "classType";
    SmsTemplate.attributeTypeMap = [
        {
            "name": "templateName",
            "baseName": "template_name",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        }
    ];
    return SmsTemplate;
}());
exports.SmsTemplate = SmsTemplate;
/**
* String to be stripped.
*/
var StrippedString = /** @class */ (function () {
    function StrippedString() {
    }
    StrippedString.getAttributeTypeMap = function () {
        return StrippedString.attributeTypeMap;
    };
    StrippedString.discriminator = "classType";
    StrippedString.attributeTypeMap = [
        {
            "name": "stripString",
            "baseName": "strip_string",
            "type": "string"
        }
    ];
    return StrippedString;
}());
exports.StrippedString = StrippedString;
/**
* Accounts that are maintained under a main account
*/
var Subaccount = /** @class */ (function () {
    function Subaccount() {
    }
    Subaccount.getAttributeTypeMap = function () {
        return Subaccount.attributeTypeMap;
    };
    Subaccount.discriminator = "classType";
    Subaccount.attributeTypeMap = [
        {
            "name": "apiUsername",
            "baseName": "api_username",
            "type": "string"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "phoneNumber",
            "baseName": "phone_number",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "accessUsers",
            "baseName": "access_users",
            "type": "number"
        },
        {
            "name": "accessBilling",
            "baseName": "access_billing",
            "type": "number"
        },
        {
            "name": "accessReporting",
            "baseName": "access_reporting",
            "type": "number"
        },
        {
            "name": "accessContacts",
            "baseName": "access_contacts",
            "type": "number"
        },
        {
            "name": "accessSettings",
            "baseName": "access_settings",
            "type": "number"
        }
    ];
    return Subaccount;
}());
exports.Subaccount = Subaccount;
/**
* Your file to be uploaded.
*/
var UploadFile = /** @class */ (function () {
    function UploadFile() {
    }
    UploadFile.getAttributeTypeMap = function () {
        return UploadFile.attributeTypeMap;
    };
    UploadFile.discriminator = "classType";
    UploadFile.attributeTypeMap = [
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        }
    ];
    return UploadFile;
}());
exports.UploadFile = UploadFile;
/**
* Your url.
*/
var Url = /** @class */ (function () {
    function Url() {
    }
    Url.getAttributeTypeMap = function () {
        return Url.attributeTypeMap;
    };
    Url.discriminator = "classType";
    Url.attributeTypeMap = [
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }
    ];
    return Url;
}());
exports.Url = Url;
/**
* VoiceMessage fields: source, to, list_id, body, lang, voice, schedule, custom_string, country
*/
var VoiceMessage = /** @class */ (function () {
    function VoiceMessage() {
    }
    VoiceMessage.getAttributeTypeMap = function () {
        return VoiceMessage.attributeTypeMap;
    };
    VoiceMessage.discriminator = "classType";
    VoiceMessage.attributeTypeMap = [
        {
            "name": "to",
            "baseName": "to",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "voice",
            "baseName": "voice",
            "type": "string"
        },
        {
            "name": "customString",
            "baseName": "custom_string",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "string"
        },
        {
            "name": "listId",
            "baseName": "list_id",
            "type": "number"
        },
        {
            "name": "lang",
            "baseName": "lang",
            "type": "string"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "number"
        },
        {
            "name": "requireInput",
            "baseName": "require_input",
            "type": "number"
        },
        {
            "name": "machineDetection",
            "baseName": "machine_detection",
            "type": "number"
        }
    ];
    return VoiceMessage;
}());
exports.VoiceMessage = VoiceMessage;
/**
* Array of VoiceMessage items
*/
var VoiceMessageCollection = /** @class */ (function () {
    function VoiceMessageCollection() {
    }
    VoiceMessageCollection.getAttributeTypeMap = function () {
        return VoiceMessageCollection.attributeTypeMap;
    };
    VoiceMessageCollection.discriminator = "classType";
    VoiceMessageCollection.attributeTypeMap = [
        {
            "name": "messages",
            "baseName": "messages",
            "type": "Array<VoiceMessage>"
        }
    ];
    return VoiceMessageCollection;
}());
exports.VoiceMessageCollection = VoiceMessageCollection;
var enumsMap = {};
var typeMap = {
    "Account": Account,
    "AccountForgotPasswordVerify": AccountForgotPasswordVerify,
    "AccountVerify": AccountVerify,
    "Address": Address,
    "Attachment": Attachment,
    "Contact": Contact,
    "ContactList": ContactList,
    "ContactListImport": ContactListImport,
    "CreditCard": CreditCard,
    "DateBefore": DateBefore,
    "DeliveryIssue": DeliveryIssue,
    "DeliveryReceiptRule": DeliveryReceiptRule,
    "Email": Email,
    "EmailAddress": EmailAddress,
    "EmailCampaign": EmailCampaign,
    "EmailFrom": EmailFrom,
    "EmailRecipient": EmailRecipient,
    "EmailSMSAddress": EmailSMSAddress,
    "EmailTemplateNew": EmailTemplateNew,
    "EmailTemplateUpdate": EmailTemplateUpdate,
    "FaxMessage": FaxMessage,
    "FaxMessageCollection": FaxMessageCollection,
    "Fields": Fields,
    "FieldsFields": FieldsFields,
    "ForgotPassword": ForgotPassword,
    "ForgotUsername": ForgotUsername,
    "InboundFaxRule": InboundFaxRule,
    "InboundSMSRule": InboundSMSRule,
    "MmsCampaign": MmsCampaign,
    "MmsMessage": MmsMessage,
    "MmsMessageCollection": MmsMessageCollection,
    "PostLetter": PostLetter,
    "PostPostcard": PostPostcard,
    "PostRecipient": PostRecipient,
    "ResellerAccount": ResellerAccount,
    "ResellerAccountTransferCredit": ResellerAccountTransferCredit,
    "SmsCampaign": SmsCampaign,
    "SmsMessage": SmsMessage,
    "SmsMessageCollection": SmsMessageCollection,
    "SmsTemplate": SmsTemplate,
    "StrippedString": StrippedString,
    "Subaccount": Subaccount,
    "UploadFile": UploadFile,
    "Url": Url,
    "VoiceMessage": VoiceMessage,
    "VoiceMessageCollection": VoiceMessageCollection,
};
var HttpBasicAuth = /** @class */ (function () {
    function HttpBasicAuth() {
        this.username = '';
        this.password = '';
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
exports.HttpBasicAuth = HttpBasicAuth;
var ApiKeyAuth = /** @class */ (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
exports.ApiKeyAuth = ApiKeyAuth;
var OAuth = /** @class */ (function () {
    function OAuth() {
        this.accessToken = '';
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    };
    return OAuth;
}());
exports.OAuth = OAuth;
var VoidAuth = /** @class */ (function () {
    function VoidAuth() {
        this.username = '';
        this.password = '';
    }
    VoidAuth.prototype.applyToRequest = function (_) {
        // Do nothing
    };
    return VoidAuth;
}());
exports.VoidAuth = VoidAuth;
var AccountApiApiKeys;
(function (AccountApiApiKeys) {
})(AccountApiApiKeys = exports.AccountApiApiKeys || (exports.AccountApiApiKeys = {}));
var AccountApi = /** @class */ (function () {
    function AccountApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AccountApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AccountApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AccountApi.prototype.setApiKey = function (key, value) {
        this.authentications[AccountApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(AccountApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get account details
     * @summary Get account information
     * @param {*} [options] Override http request options.
     */
    AccountApi.prototype.accountGet = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/account';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create An Account
     * @summary Create a new account
     * @param account Account model
     * @param {*} [options] Override http request options.
     */
    AccountApi.prototype.accountPost = function (account, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/account';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'account' is not null or undefined
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling accountPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(account, "Account")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get account useage by subaccount
     * @summary Get account useage by subaccount
     * @param year Year to filter by (yyyy)
     * @param month Month to filter by (mm)
     * @param {*} [options] Override http request options.
     */
    AccountApi.prototype.accountUseageBySubaccountGet = function (year, month, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/account/usage/{year}/{month}/subaccount'
            .replace('{' + 'year' + '}', encodeURIComponent(String(year)))
            .replace('{' + 'month' + '}', encodeURIComponent(String(month)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'year' is not null or undefined
        if (year === null || year === undefined) {
            throw new Error('Required parameter year was null or undefined when calling accountUseageBySubaccountGet.');
        }
        // verify required parameter 'month' is not null or undefined
        if (month === null || month === undefined) {
            throw new Error('Required parameter month was null or undefined when calling accountUseageBySubaccountGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Send account activation token
     * @summary Send account activation token
     * @param accountVerify Account details
     * @param {*} [options] Override http request options.
     */
    AccountApi.prototype.accountVerifySendPut = function (accountVerify, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/account-verify/send';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'accountVerify' is not null or undefined
        if (accountVerify === null || accountVerify === undefined) {
            throw new Error('Required parameter accountVerify was null or undefined when calling accountVerifySendPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(accountVerify, "AccountVerify")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Verify new account
     * @summary Verify new account
     * @param activationToken
     * @param {*} [options] Override http request options.
     */
    AccountApi.prototype.accountVerifyVerifyByActivationTokenPut = function (activationToken, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/account-verify/verify/{activation_token}'
            .replace('{' + 'activation_token' + '}', encodeURIComponent(String(activationToken)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'activationToken' is not null or undefined
        if (activationToken === null || activationToken === undefined) {
            throw new Error('Required parameter activationToken was null or undefined when calling accountVerifyVerifyByActivationTokenPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Forgot password
     * @summary Forgot password
     * @param forgotPassword
     * @param {*} [options] Override http request options.
     */
    AccountApi.prototype.forgotPasswordPut = function (forgotPassword, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/forgot-password';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(forgotPassword, "ForgotPassword")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Verify forgot password
     * @summary Verify forgot password
     * @param verifyPassword verifyPassword data
     * @param {*} [options] Override http request options.
     */
    AccountApi.prototype.forgotPasswordVerifyPut = function (verifyPassword, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/forgot-password/verify';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'verifyPassword' is not null or undefined
        if (verifyPassword === null || verifyPassword === undefined) {
            throw new Error('Required parameter verifyPassword was null or undefined when calling forgotPasswordVerifyPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(verifyPassword, "AccountForgotPasswordVerify")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Forgot username
     * @summary Forgot username
     * @param forgotUsername
     * @param {*} [options] Override http request options.
     */
    AccountApi.prototype.forgotUsernamePut = function (forgotUsername, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/forgot-username';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(forgotUsername, "ForgotUsername")
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AccountApi;
}());
exports.AccountApi = AccountApi;
var AccountRechargeApiApiKeys;
(function (AccountRechargeApiApiKeys) {
})(AccountRechargeApiApiKeys = exports.AccountRechargeApiApiKeys || (exports.AccountRechargeApiApiKeys = {}));
var AccountRechargeApi = /** @class */ (function () {
    function AccountRechargeApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AccountRechargeApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountRechargeApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AccountRechargeApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AccountRechargeApi.prototype.setApiKey = function (key, value) {
        this.authentications[AccountRechargeApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(AccountRechargeApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountRechargeApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get Credit Card info
     * @summary Get Credit Card info
     * @param {*} [options] Override http request options.
     */
    AccountRechargeApi.prototype.rechargeCreditCardGet = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/recharge/credit-card';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update credit card info
     * @summary Update credit card info
     * @param creditCard CreditCard model
     * @param {*} [options] Override http request options.
     */
    AccountRechargeApi.prototype.rechargeCreditCardPut = function (creditCard, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/recharge/credit-card';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'creditCard' is not null or undefined
        if (creditCard === null || creditCard === undefined) {
            throw new Error('Required parameter creditCard was null or undefined when calling rechargeCreditCardPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(creditCard, "CreditCard")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get list of all packages
     * @summary Get list of all packages
     * @param country Country code
     * @param {*} [options] Override http request options.
     */
    AccountRechargeApi.prototype.rechargePackagesGet = function (country, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/recharge/packages';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (country !== undefined) {
            localVarQueryParameters['country'] = ObjectSerializer.serialize(country, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Purchase a package
     * @summary Purchase a package
     * @param packageId ID of package to purchase
     * @param {*} [options] Override http request options.
     */
    AccountRechargeApi.prototype.rechargePurchaseByPackageIdPut = function (packageId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/recharge/purchase/{package_id}'
            .replace('{' + 'package_id' + '}', encodeURIComponent(String(packageId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'packageId' is not null or undefined
        if (packageId === null || packageId === undefined) {
            throw new Error('Required parameter packageId was null or undefined when calling rechargePurchaseByPackageIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific Transaction
     * @summary Get specific Transaction
     * @param transactionId ID of transaction to retrieve
     * @param {*} [options] Override http request options.
     */
    AccountRechargeApi.prototype.rechargeTransactionsByTransactionIdGet = function (transactionId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/recharge/transactions/{transaction_id}'
            .replace('{' + 'transaction_id' + '}', encodeURIComponent(String(transactionId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'transactionId' is not null or undefined
        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling rechargeTransactionsByTransactionIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all transactions
     * @summary Purchase a package
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    AccountRechargeApi.prototype.rechargeTransactionsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/recharge/transactions';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AccountRechargeApi;
}());
exports.AccountRechargeApi = AccountRechargeApi;
var ContactApiApiKeys;
(function (ContactApiApiKeys) {
})(ContactApiApiKeys = exports.ContactApiApiKeys || (exports.ContactApiApiKeys = {}));
var ContactApi = /** @class */ (function () {
    function ContactApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ContactApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    ContactApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ContactApi.prototype.setApiKey = function (key, value) {
        this.authentications[ContactApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(ContactApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Delete a contact
     * @summary Delete a contact
     * @param listId List ID
     * @param contactId Contact ID
     * @param {*} [options] Override http request options.
     */
    ContactApi.prototype.listsContactsByListIdAndContactIdDelete = function (listId, contactId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists/{list_id}/contacts/{contact_id}'
            .replace('{' + 'list_id' + '}', encodeURIComponent(String(listId)))
            .replace('{' + 'contact_id' + '}', encodeURIComponent(String(contactId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling listsContactsByListIdAndContactIdDelete.');
        }
        // verify required parameter 'contactId' is not null or undefined
        if (contactId === null || contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling listsContactsByListIdAndContactIdDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get a specific contact
     * @summary Get a specific contact
     * @param listId Your contact list id you want to access.
     * @param contactId Your contact id you want to access.
     * @param {*} [options] Override http request options.
     */
    ContactApi.prototype.listsContactsByListIdAndContactIdGet = function (listId, contactId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists/{list_id}/contacts/{contact_id}'
            .replace('{' + 'list_id' + '}', encodeURIComponent(String(listId)))
            .replace('{' + 'contact_id' + '}', encodeURIComponent(String(contactId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling listsContactsByListIdAndContactIdGet.');
        }
        // verify required parameter 'contactId' is not null or undefined
        if (contactId === null || contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling listsContactsByListIdAndContactIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update specific contact
     * @summary Update specific contact
     * @param listId Contact list id
     * @param contactId Contact ID
     * @param contact Contact model
     * @param {*} [options] Override http request options.
     */
    ContactApi.prototype.listsContactsByListIdAndContactIdPut = function (listId, contactId, contact, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists/{list_id}/contacts/{contact_id}'
            .replace('{' + 'list_id' + '}', encodeURIComponent(String(listId)))
            .replace('{' + 'contact_id' + '}', encodeURIComponent(String(contactId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling listsContactsByListIdAndContactIdPut.');
        }
        // verify required parameter 'contactId' is not null or undefined
        if (contactId === null || contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling listsContactsByListIdAndContactIdPut.');
        }
        // verify required parameter 'contact' is not null or undefined
        if (contact === null || contact === undefined) {
            throw new Error('Required parameter contact was null or undefined when calling listsContactsByListIdAndContactIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(contact, "Contact")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all contacts in a list
     * @summary Get all contacts in a list
     * @param listId Contact list ID
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    ContactApi.prototype.listsContactsByListIdGet = function (listId, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists/{list_id}/contacts'
            .replace('{' + 'list_id' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling listsContactsByListIdGet.');
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create new contact
     * @summary Create new contact
     * @param contact Contact model
     * @param listId List id
     * @param {*} [options] Override http request options.
     */
    ContactApi.prototype.listsContactsByListIdPost = function (contact, listId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists/{list_id}/contacts'
            .replace('{' + 'list_id' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'contact' is not null or undefined
        if (contact === null || contact === undefined) {
            throw new Error('Required parameter contact was null or undefined when calling listsContactsByListIdPost.');
        }
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling listsContactsByListIdPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(contact, "Contact")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Remove all opted out contacts
     * @summary Remove all opted out contacts
     * @param listId Your list id
     * @param optOutListId Your opt out list id
     * @param {*} [options] Override http request options.
     */
    ContactApi.prototype.listsRemoveOptedOutContactsByListIdAndOptOutListIdPut = function (listId, optOutListId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists/{list_id}/remove-opted-out-contacts/{opt_out_list_id}'
            .replace('{' + 'list_id' + '}', encodeURIComponent(String(listId)))
            .replace('{' + 'opt_out_list_id' + '}', encodeURIComponent(String(optOutListId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling listsRemoveOptedOutContactsByListIdAndOptOutListIdPut.');
        }
        // verify required parameter 'optOutListId' is not null or undefined
        if (optOutListId === null || optOutListId === undefined) {
            throw new Error('Required parameter optOutListId was null or undefined when calling listsRemoveOptedOutContactsByListIdAndOptOutListIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Transfer contact to another list
     * @summary Transfer contact to another list
     * @param fromListId List ID for list that contains contact.
     * @param contactId Contact ID
     * @param toListId List ID for list you want to transfer contact to.
     * @param {*} [options] Override http request options.
     */
    ContactApi.prototype.listsTransferContactPut = function (fromListId, contactId, toListId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists/{from_list_id}/contacts/{contact_id}/transfer/{to_list_id}'
            .replace('{' + 'from_list_id' + '}', encodeURIComponent(String(fromListId)))
            .replace('{' + 'contact_id' + '}', encodeURIComponent(String(contactId)))
            .replace('{' + 'to_list_id' + '}', encodeURIComponent(String(toListId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'fromListId' is not null or undefined
        if (fromListId === null || fromListId === undefined) {
            throw new Error('Required parameter fromListId was null or undefined when calling listsTransferContactPut.');
        }
        // verify required parameter 'contactId' is not null or undefined
        if (contactId === null || contactId === undefined) {
            throw new Error('Required parameter contactId was null or undefined when calling listsTransferContactPut.');
        }
        // verify required parameter 'toListId' is not null or undefined
        if (toListId === null || toListId === undefined) {
            throw new Error('Required parameter toListId was null or undefined when calling listsTransferContactPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ContactApi;
}());
exports.ContactApi = ContactApi;
var ContactListApiApiKeys;
(function (ContactListApiApiKeys) {
})(ContactListApiApiKeys = exports.ContactListApiApiKeys || (exports.ContactListApiApiKeys = {}));
var ContactListApi = /** @class */ (function () {
    function ContactListApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ContactListApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactListApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    ContactListApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ContactListApi.prototype.setApiKey = function (key, value) {
        this.authentications[ContactListApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(ContactListApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContactListApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Delete a specific contact list
     * @summary ListsByListIdDelete
     * @param listId List ID
     * @param {*} [options] Override http request options.
     */
    ContactListApi.prototype.listsByListIdDelete = function (listId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists/{list_id}'
            .replace('{' + 'list_id' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling listsByListIdDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific contact list
     * @summary Get specific contact list
     * @param listId List ID
     * @param {*} [options] Override http request options.
     */
    ContactListApi.prototype.listsByListIdGet = function (listId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists/{list_id}'
            .replace('{' + 'list_id' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling listsByListIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update specific contact list
     * @summary Update specific contact list
     * @param listId Your list id
     * @param contactList Contact list model
     * @param {*} [options] Override http request options.
     */
    ContactListApi.prototype.listsByListIdPut = function (listId, contactList, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists/{list_id}'
            .replace('{' + 'list_id' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling listsByListIdPut.');
        }
        // verify required parameter 'contactList' is not null or undefined
        if (contactList === null || contactList === undefined) {
            throw new Error('Required parameter contactList was null or undefined when calling listsByListIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(contactList, "ContactList")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all contact lists
     * @summary Get all contact lists
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    ContactListApi.prototype.listsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Import contacts to list
     * @summary Import contacts to list
     * @param listId Your contact list id you want to access.
     * @param file ContactListImport model
     * @param {*} [options] Override http request options.
     */
    ContactListApi.prototype.listsImportByListIdPost = function (listId, file, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists/{list_id}/import'
            .replace('{' + 'list_id' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling listsImportByListIdPost.');
        }
        // verify required parameter 'file' is not null or undefined
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling listsImportByListIdPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(file, "ContactListImport")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create new contact list
     * @summary Create new contact list
     * @param contactList Contact list model
     * @param {*} [options] Override http request options.
     */
    ContactListApi.prototype.listsPost = function (contactList, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'contactList' is not null or undefined
        if (contactList === null || contactList === undefined) {
            throw new Error('Required parameter contactList was null or undefined when calling listsPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(contactList, "ContactList")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Remove duplicate contacts
     * @summary Remove duplicate contacts
     * @param listId Your list id
     * @param fields Fields model
     * @param {*} [options] Override http request options.
     */
    ContactListApi.prototype.listsRemoveDuplicatesByListIdPut = function (listId, fields, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/lists/{list_id}/remove-duplicates'
            .replace('{' + 'list_id' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling listsRemoveDuplicatesByListIdPut.');
        }
        // verify required parameter 'fields' is not null or undefined
        if (fields === null || fields === undefined) {
            throw new Error('Required parameter fields was null or undefined when calling listsRemoveDuplicatesByListIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(fields, "Fields")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ContactListApi;
}());
exports.ContactListApi = ContactListApi;
var CountriesApiApiKeys;
(function (CountriesApiApiKeys) {
})(CountriesApiApiKeys = exports.CountriesApiApiKeys || (exports.CountriesApiApiKeys = {}));
var CountriesApi = /** @class */ (function () {
    function CountriesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(CountriesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CountriesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    CountriesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    CountriesApi.prototype.setApiKey = function (key, value) {
        this.authentications[CountriesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(CountriesApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CountriesApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get all countries
     * @summary Get all country codes
     * @param {*} [options] Override http request options.
     */
    CountriesApi.prototype.countriesGet = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/countries';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return CountriesApi;
}());
exports.CountriesApi = CountriesApi;
var DeliveryIssuesApiApiKeys;
(function (DeliveryIssuesApiApiKeys) {
})(DeliveryIssuesApiApiKeys = exports.DeliveryIssuesApiApiKeys || (exports.DeliveryIssuesApiApiKeys = {}));
var DeliveryIssuesApi = /** @class */ (function () {
    function DeliveryIssuesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(DeliveryIssuesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeliveryIssuesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    DeliveryIssuesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    DeliveryIssuesApi.prototype.setApiKey = function (key, value) {
        this.authentications[DeliveryIssuesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(DeliveryIssuesApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeliveryIssuesApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get all delivery issues
     * @summary Get all delivery issues
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    DeliveryIssuesApi.prototype.deliveryIssuesGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/delivery-issues';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create delivery Issue
     * @summary Create delivery Issue
     * @param deliveryIssue DeliveryIssue model
     * @param {*} [options] Override http request options.
     */
    DeliveryIssuesApi.prototype.deliveryIssuesPost = function (deliveryIssue, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/delivery-issues';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'deliveryIssue' is not null or undefined
        if (deliveryIssue === null || deliveryIssue === undefined) {
            throw new Error('Required parameter deliveryIssue was null or undefined when calling deliveryIssuesPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deliveryIssue, "DeliveryIssue")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return DeliveryIssuesApi;
}());
exports.DeliveryIssuesApi = DeliveryIssuesApi;
var DetectAddressApiApiKeys;
(function (DetectAddressApiApiKeys) {
})(DetectAddressApiApiKeys = exports.DetectAddressApiApiKeys || (exports.DetectAddressApiApiKeys = {}));
var DetectAddressApi = /** @class */ (function () {
    function DetectAddressApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(DetectAddressApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DetectAddressApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    DetectAddressApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    DetectAddressApi.prototype.setApiKey = function (key, value) {
        this.authentications[DetectAddressApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(DetectAddressApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DetectAddressApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Detects address in uploaded file.
     * @summary Detects address in uploaded file.
     * @param uploadFile Your file to be uploaded
     * @param {*} [options] Override http request options.
     */
    DetectAddressApi.prototype.detectAddressPost = function (uploadFile, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/letters/detect-address';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'uploadFile' is not null or undefined
        if (uploadFile === null || uploadFile === undefined) {
            throw new Error('Required parameter uploadFile was null or undefined when calling detectAddressPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(uploadFile, "UploadFile")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return DetectAddressApi;
}());
exports.DetectAddressApi = DetectAddressApi;
var EmailDeliveryReceiptRulesApiApiKeys;
(function (EmailDeliveryReceiptRulesApiApiKeys) {
})(EmailDeliveryReceiptRulesApiApiKeys = exports.EmailDeliveryReceiptRulesApiApiKeys || (exports.EmailDeliveryReceiptRulesApiApiKeys = {}));
var EmailDeliveryReceiptRulesApi = /** @class */ (function () {
    function EmailDeliveryReceiptRulesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(EmailDeliveryReceiptRulesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmailDeliveryReceiptRulesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    EmailDeliveryReceiptRulesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    EmailDeliveryReceiptRulesApi.prototype.setApiKey = function (key, value) {
        this.authentications[EmailDeliveryReceiptRulesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(EmailDeliveryReceiptRulesApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmailDeliveryReceiptRulesApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Delete email delivery receipt automation
     * @summary Delete email delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    EmailDeliveryReceiptRulesApi.prototype.emailDeliveryReceiptAutomationDelete = function (receiptRuleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/email/receipts/{receipt_rule_id}'
            .replace('{' + 'receipt_rule_id' + '}', encodeURIComponent(String(receiptRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'receiptRuleId' is not null or undefined
        if (receiptRuleId === null || receiptRuleId === undefined) {
            throw new Error('Required parameter receiptRuleId was null or undefined when calling emailDeliveryReceiptAutomationDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific email delivery receipt automation
     * @summary Get specific email delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    EmailDeliveryReceiptRulesApi.prototype.emailDeliveryReceiptAutomationGet = function (receiptRuleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/email/receipts/{receipt_rule_id}'
            .replace('{' + 'receipt_rule_id' + '}', encodeURIComponent(String(receiptRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'receiptRuleId' is not null or undefined
        if (receiptRuleId === null || receiptRuleId === undefined) {
            throw new Error('Required parameter receiptRuleId was null or undefined when calling emailDeliveryReceiptAutomationGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create email delivery receipt automations
     * @summary Create email delivery receipt automations
     * @param deliveryReceiptRule Email delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    EmailDeliveryReceiptRulesApi.prototype.emailDeliveryReceiptAutomationPost = function (deliveryReceiptRule, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/email/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'deliveryReceiptRule' is not null or undefined
        if (deliveryReceiptRule === null || deliveryReceiptRule === undefined) {
            throw new Error('Required parameter deliveryReceiptRule was null or undefined when calling emailDeliveryReceiptAutomationPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deliveryReceiptRule, "DeliveryReceiptRule")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update email delivery receipt automation
     * @summary Update email delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param deliveryReceiptRule Delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    EmailDeliveryReceiptRulesApi.prototype.emailDeliveryReceiptAutomationPut = function (receiptRuleId, deliveryReceiptRule, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/email/receipts/{receipt_rule_id}'
            .replace('{' + 'receipt_rule_id' + '}', encodeURIComponent(String(receiptRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'receiptRuleId' is not null or undefined
        if (receiptRuleId === null || receiptRuleId === undefined) {
            throw new Error('Required parameter receiptRuleId was null or undefined when calling emailDeliveryReceiptAutomationPut.');
        }
        // verify required parameter 'deliveryReceiptRule' is not null or undefined
        if (deliveryReceiptRule === null || deliveryReceiptRule === undefined) {
            throw new Error('Required parameter deliveryReceiptRule was null or undefined when calling emailDeliveryReceiptAutomationPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deliveryReceiptRule, "DeliveryReceiptRule")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all email delivery receipt automations
     * @summary Get all email delivery receipt automations
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    EmailDeliveryReceiptRulesApi.prototype.emailDeliveryReceiptAutomationsGet = function (q, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/email/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "string");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return EmailDeliveryReceiptRulesApi;
}());
exports.EmailDeliveryReceiptRulesApi = EmailDeliveryReceiptRulesApi;
var EmailMarketingApiApiKeys;
(function (EmailMarketingApiApiKeys) {
})(EmailMarketingApiApiKeys = exports.EmailMarketingApiApiKeys || (exports.EmailMarketingApiApiKeys = {}));
var EmailMarketingApi = /** @class */ (function () {
    function EmailMarketingApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(EmailMarketingApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmailMarketingApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    EmailMarketingApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    EmailMarketingApi.prototype.setApiKey = function (key, value) {
        this.authentications[EmailMarketingApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(EmailMarketingApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmailMarketingApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get all email addresses
     * @summary Get all email addresses
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.allowedEmailAddressGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/addresses';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create allowed Email Address
     * @summary Create allowed Email Address
     * @param emailAddress
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.allowedEmailAddressPost = function (emailAddress, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/addresses';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailAddress, "EmailAddress")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Cancel email campaign
     * @summary Cancel email campaign
     * @param emailCampaignId Allowed email campaign id
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.cancelEmailCampaignPut = function (emailCampaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email-campaigns/{email_campaign_id}/cancel'
            .replace('{' + 'email_campaign_id' + '}', encodeURIComponent(String(emailCampaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailCampaignId' is not null or undefined
        if (emailCampaignId === null || emailCampaignId === undefined) {
            throw new Error('Required parameter emailCampaignId was null or undefined when calling cancelEmailCampaignPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific email campaign
     * @summary Get specific email campaign
     * @param emailCampaignId Allowed email campaign id
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.emailCampaignGet = function (emailCampaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email-campaigns/{email_campaign_id}'
            .replace('{' + 'email_campaign_id' + '}', encodeURIComponent(String(emailCampaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailCampaignId' is not null or undefined
        if (emailCampaignId === null || emailCampaignId === undefined) {
            throw new Error('Required parameter emailCampaignId was null or undefined when calling emailCampaignGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Export specific email campaign history
     * @summary Export specific email campaign history
     * @param emailCampaignId Allowed email campaign id
     * @param dateFrom Start date
     * @param dateTo End date
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.emailCampaignHistoryExportGet = function (emailCampaignId, dateFrom, dateTo, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email-campaigns/{email_campaign_id}/history/export'
            .replace('{' + 'email_campaign_id' + '}', encodeURIComponent(String(emailCampaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailCampaignId' is not null or undefined
        if (emailCampaignId === null || emailCampaignId === undefined) {
            throw new Error('Required parameter emailCampaignId was null or undefined when calling emailCampaignHistoryExportGet.');
        }
        if (dateFrom !== undefined) {
            localVarQueryParameters['date_from'] = ObjectSerializer.serialize(dateFrom, "number");
        }
        if (dateTo !== undefined) {
            localVarQueryParameters['date_to'] = ObjectSerializer.serialize(dateTo, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific email campaign history
     * @summary Get specific email campaign history
     * @param emailCampaignId Allowed email campaign id
     * @param dateFrom Start date
     * @param dateTo End date
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.emailCampaignHistoryGet = function (emailCampaignId, dateFrom, dateTo, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email-campaigns/{email_campaign_id}/history'
            .replace('{' + 'email_campaign_id' + '}', encodeURIComponent(String(emailCampaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailCampaignId' is not null or undefined
        if (emailCampaignId === null || emailCampaignId === undefined) {
            throw new Error('Required parameter emailCampaignId was null or undefined when calling emailCampaignHistoryGet.');
        }
        if (dateFrom !== undefined) {
            localVarQueryParameters['date_from'] = ObjectSerializer.serialize(dateFrom, "number");
        }
        if (dateTo !== undefined) {
            localVarQueryParameters['date_to'] = ObjectSerializer.serialize(dateTo, "number");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Send email campaign
     * @summary Send email campaign
     * @param emailCampaign Email model
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.emailCampaignPost = function (emailCampaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email-campaigns/send';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailCampaign' is not null or undefined
        if (emailCampaign === null || emailCampaign === undefined) {
            throw new Error('Required parameter emailCampaign was null or undefined when calling emailCampaignPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCampaign, "EmailCampaign")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Calculate email campaign price
     * @summary Calculate email campaign price
     * @param emailCampaign Email model
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.emailCampaignPricePost = function (emailCampaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email-campaigns/price';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailCampaign' is not null or undefined
        if (emailCampaign === null || emailCampaign === undefined) {
            throw new Error('Required parameter emailCampaign was null or undefined when calling emailCampaignPricePost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCampaign, "EmailCampaign")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Edit email campaign
     * @summary Edit email campaign
     * @param emailCampaignId Allowed email campaign id
     * @param emailCampaign Email model
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.emailCampaignPut = function (emailCampaignId, emailCampaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email-campaigns/{email_campaign_id}'
            .replace('{' + 'email_campaign_id' + '}', encodeURIComponent(String(emailCampaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailCampaignId' is not null or undefined
        if (emailCampaignId === null || emailCampaignId === undefined) {
            throw new Error('Required parameter emailCampaignId was null or undefined when calling emailCampaignPut.');
        }
        // verify required parameter 'emailCampaign' is not null or undefined
        if (emailCampaign === null || emailCampaign === undefined) {
            throw new Error('Required parameter emailCampaign was null or undefined when calling emailCampaignPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCampaign, "EmailCampaign")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all email campaigns
     * @summary Get all email campaigns
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.emailCampaignsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email-campaigns';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Send verification token
     * @summary Send verification token
     * @param emailAddressId Allowed email address id
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.sendVerificationTokenGet = function (emailAddressId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/address-verify/{email_address_id}/send'
            .replace('{' + 'email_address_id' + '}', encodeURIComponent(String(emailAddressId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailAddressId' is not null or undefined
        if (emailAddressId === null || emailAddressId === undefined) {
            throw new Error('Required parameter emailAddressId was null or undefined when calling sendVerificationTokenGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Delete specific email address
     * @summary Delete specific email address
     * @param emailAddressId Allowed email address id
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.specificAllowedEmailAddressDelete = function (emailAddressId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/addresses/{email_address_id}'
            .replace('{' + 'email_address_id' + '}', encodeURIComponent(String(emailAddressId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailAddressId' is not null or undefined
        if (emailAddressId === null || emailAddressId === undefined) {
            throw new Error('Required parameter emailAddressId was null or undefined when calling specificAllowedEmailAddressDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific email address
     * @summary Get specific email address
     * @param emailAddressId Allowed email address id
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.specificAllowedEmailAddressGet = function (emailAddressId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/addresses/{email_address_id}'
            .replace('{' + 'email_address_id' + '}', encodeURIComponent(String(emailAddressId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailAddressId' is not null or undefined
        if (emailAddressId === null || emailAddressId === undefined) {
            throw new Error('Required parameter emailAddressId was null or undefined when calling specificAllowedEmailAddressGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Verify email address using verification token
     * @summary Verify email address using verification token
     * @param emailAddressId Allowed email address id
     * @param activationToken Your activation token.
     * @param {*} [options] Override http request options.
     */
    EmailMarketingApi.prototype.verifyAllowedEmailAddressGet = function (emailAddressId, activationToken, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/address-verify/{email_address_id}/verify/{activation_token}'
            .replace('{' + 'email_address_id' + '}', encodeURIComponent(String(emailAddressId)))
            .replace('{' + 'activation_token' + '}', encodeURIComponent(String(activationToken)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailAddressId' is not null or undefined
        if (emailAddressId === null || emailAddressId === undefined) {
            throw new Error('Required parameter emailAddressId was null or undefined when calling verifyAllowedEmailAddressGet.');
        }
        // verify required parameter 'activationToken' is not null or undefined
        if (activationToken === null || activationToken === undefined) {
            throw new Error('Required parameter activationToken was null or undefined when calling verifyAllowedEmailAddressGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return EmailMarketingApi;
}());
exports.EmailMarketingApi = EmailMarketingApi;
var EmailToSmsApiApiKeys;
(function (EmailToSmsApiApiKeys) {
})(EmailToSmsApiApiKeys = exports.EmailToSmsApiApiKeys || (exports.EmailToSmsApiApiKeys = {}));
var EmailToSmsApi = /** @class */ (function () {
    function EmailToSmsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(EmailToSmsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmailToSmsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    EmailToSmsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    EmailToSmsApi.prototype.setApiKey = function (key, value) {
        this.authentications[EmailToSmsApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(EmailToSmsApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmailToSmsApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get list of email to sms allowed addresses
     * @summary Get list of email to sms allowed addresses
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    EmailToSmsApi.prototype.smsEmailSmsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/email-sms';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create email to sms allowed address
     * @summary Create email to sms allowed address
     * @param emailSmsAddress EmailSMSAddress model
     * @param {*} [options] Override http request options.
     */
    EmailToSmsApi.prototype.smsEmailSmsPost = function (emailSmsAddress, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/email-sms';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailSmsAddress' is not null or undefined
        if (emailSmsAddress === null || emailSmsAddress === undefined) {
            throw new Error('Required parameter emailSmsAddress was null or undefined when calling smsEmailSmsPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailSmsAddress, "EmailSMSAddress")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Delete email to sms stripped string rule
     * @summary Delete email to sms stripped string rule
     * @param ruleId Your rule id
     * @param {*} [options] Override http request options.
     */
    EmailToSmsApi.prototype.smsEmailSmsStrippedStringDelete = function (ruleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/email-sms-stripped-strings/{rule_id}'
            .replace('{' + 'rule_id' + '}', encodeURIComponent(String(ruleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'ruleId' is not null or undefined
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling smsEmailSmsStrippedStringDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get email to sms stripped string rule
     * @summary Get email to sms stripped string rule
     * @param ruleId Your rule id
     * @param {*} [options] Override http request options.
     */
    EmailToSmsApi.prototype.smsEmailSmsStrippedStringGet = function (ruleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/email-sms-stripped-strings/{rule_id}'
            .replace('{' + 'rule_id' + '}', encodeURIComponent(String(ruleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'ruleId' is not null or undefined
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling smsEmailSmsStrippedStringGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create email to sms stripped string rules
     * @summary Create email to sms stripped string rule
     * @param strippedString StrippedString model
     * @param {*} [options] Override http request options.
     */
    EmailToSmsApi.prototype.smsEmailSmsStrippedStringPost = function (strippedString, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/email-sms-stripped-strings';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'strippedString' is not null or undefined
        if (strippedString === null || strippedString === undefined) {
            throw new Error('Required parameter strippedString was null or undefined when calling smsEmailSmsStrippedStringPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(strippedString, "StrippedString")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update email to sms stripped string rule
     * @summary Update email to sms stripped string rule
     * @param strippedString StrippedString model
     * @param ruleId Your rule id
     * @param {*} [options] Override http request options.
     */
    EmailToSmsApi.prototype.smsEmailSmsStrippedStringPut = function (strippedString, ruleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/email-sms-stripped-strings/{rule_id}'
            .replace('{' + 'rule_id' + '}', encodeURIComponent(String(ruleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'strippedString' is not null or undefined
        if (strippedString === null || strippedString === undefined) {
            throw new Error('Required parameter strippedString was null or undefined when calling smsEmailSmsStrippedStringPut.');
        }
        // verify required parameter 'ruleId' is not null or undefined
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling smsEmailSmsStrippedStringPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(strippedString, "StrippedString")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get list of email to sms stripped string rules
     * @summary Get list of email to sms stripped string rules
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    EmailToSmsApi.prototype.smsEmailSmsStrippedStringsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/email-sms-stripped-strings';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return EmailToSmsApi;
}());
exports.EmailToSmsApi = EmailToSmsApi;
var FAXApiApiKeys;
(function (FAXApiApiKeys) {
})(FAXApiApiKeys = exports.FAXApiApiKeys || (exports.FAXApiApiKeys = {}));
var FAXApi = /** @class */ (function () {
    function FAXApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(FAXApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FAXApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    FAXApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    FAXApi.prototype.setApiKey = function (key, value) {
        this.authentications[FAXApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(FAXApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FAXApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get a list of Fax History.
     * @summary Get a list of Fax History.
     * @param dateFrom Customize result by setting from date (timestsamp) Example: 1457572619.
     * @param dateTo Customize result by setting to date (timestamp) Example: 1457573000.
     * @param q Custom query Example: status:Sent,status_code:201.
     * @param order Order result by Example: date_added:desc,list_id:desc.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    FAXApi.prototype.faxHistoryGet = function (dateFrom, dateTo, q, order, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/fax/history';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (dateFrom !== undefined) {
            localVarQueryParameters['date_from'] = ObjectSerializer.serialize(dateFrom, "number");
        }
        if (dateTo !== undefined) {
            localVarQueryParameters['date_to'] = ObjectSerializer.serialize(dateTo, "number");
        }
        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "string");
        }
        if (order !== undefined) {
            localVarQueryParameters['order'] = ObjectSerializer.serialize(order, "string");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Calculate Total Price for Fax Messages sent
     * @summary Calculate Total Price for Fax Messages sent
     * @param faxMessage FaxMessageCollection model
     * @param {*} [options] Override http request options.
     */
    FAXApi.prototype.faxPricePost = function (faxMessage, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/fax/price';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'faxMessage' is not null or undefined
        if (faxMessage === null || faxMessage === undefined) {
            throw new Error('Required parameter faxMessage was null or undefined when calling faxPricePost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(faxMessage, "FaxMessageCollection")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get a single fax receipt based on message id.
     * @summary Get a single fax receipt based on message id.
     * @param messageId ID of the message receipt to retrieve
     * @param {*} [options] Override http request options.
     */
    FAXApi.prototype.faxReceiptsByMessageIdGet = function (messageId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/fax/receipts/{message_id}'
            .replace('{' + 'message_id' + '}', encodeURIComponent(String(messageId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'messageId' is not null or undefined
        if (messageId === null || messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling faxReceiptsByMessageIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all delivery receipts
     * @summary Get all delivery receipts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    FAXApi.prototype.faxReceiptsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/fax/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Add a delivery receipt
     * @summary Add a delivery receipt
     * @param url Url model
     * @param {*} [options] Override http request options.
     */
    FAXApi.prototype.faxReceiptsPost = function (url, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/fax/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'url' is not null or undefined
        if (url === null || url === undefined) {
            throw new Error('Required parameter url was null or undefined when calling faxReceiptsPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(url, "Url")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Mark delivery receipts as read
     * @summary Mark delivery receipts as read
     * @param dateBefore DateBefore model
     * @param {*} [options] Override http request options.
     */
    FAXApi.prototype.faxReceiptsReadPut = function (dateBefore, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/fax/receipts-read';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(dateBefore, "DateBefore")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Send a fax using supplied supported file-types.
     * @summary Send a fax using supplied supported file-types.
     * @param faxMessage FaxMessageCollection model
     * @param {*} [options] Override http request options.
     */
    FAXApi.prototype.faxSendPost = function (faxMessage, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/fax/send';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'faxMessage' is not null or undefined
        if (faxMessage === null || faxMessage === undefined) {
            throw new Error('Required parameter faxMessage was null or undefined when calling faxSendPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(faxMessage, "FaxMessageCollection")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return FAXApi;
}());
exports.FAXApi = FAXApi;
var FAXDeliveryReceiptRulesApiApiKeys;
(function (FAXDeliveryReceiptRulesApiApiKeys) {
})(FAXDeliveryReceiptRulesApiApiKeys = exports.FAXDeliveryReceiptRulesApiApiKeys || (exports.FAXDeliveryReceiptRulesApiApiKeys = {}));
var FAXDeliveryReceiptRulesApi = /** @class */ (function () {
    function FAXDeliveryReceiptRulesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(FAXDeliveryReceiptRulesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FAXDeliveryReceiptRulesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    FAXDeliveryReceiptRulesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    FAXDeliveryReceiptRulesApi.prototype.setApiKey = function (key, value) {
        this.authentications[FAXDeliveryReceiptRulesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(FAXDeliveryReceiptRulesApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FAXDeliveryReceiptRulesApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Delete fax delivery receipt automation
     * @summary Delete fax delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    FAXDeliveryReceiptRulesApi.prototype.faxDeliveryReceiptAutomationDelete = function (receiptRuleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/fax/receipts/{receipt_rule_id}'
            .replace('{' + 'receipt_rule_id' + '}', encodeURIComponent(String(receiptRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'receiptRuleId' is not null or undefined
        if (receiptRuleId === null || receiptRuleId === undefined) {
            throw new Error('Required parameter receiptRuleId was null or undefined when calling faxDeliveryReceiptAutomationDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific fax delivery receipt automation
     * @summary Get specific fax delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    FAXDeliveryReceiptRulesApi.prototype.faxDeliveryReceiptAutomationGet = function (receiptRuleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/fax/receipts/{receipt_rule_id}'
            .replace('{' + 'receipt_rule_id' + '}', encodeURIComponent(String(receiptRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'receiptRuleId' is not null or undefined
        if (receiptRuleId === null || receiptRuleId === undefined) {
            throw new Error('Required parameter receiptRuleId was null or undefined when calling faxDeliveryReceiptAutomationGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create fax delivery receipt automations
     * @summary Create fax delivery receipt automations
     * @param deliveryReceiptRule fax delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    FAXDeliveryReceiptRulesApi.prototype.faxDeliveryReceiptAutomationPost = function (deliveryReceiptRule, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/fax/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'deliveryReceiptRule' is not null or undefined
        if (deliveryReceiptRule === null || deliveryReceiptRule === undefined) {
            throw new Error('Required parameter deliveryReceiptRule was null or undefined when calling faxDeliveryReceiptAutomationPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deliveryReceiptRule, "DeliveryReceiptRule")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update fax delivery receipt automation
     * @summary Update fax delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param deliveryReceiptRule Delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    FAXDeliveryReceiptRulesApi.prototype.faxDeliveryReceiptAutomationPut = function (receiptRuleId, deliveryReceiptRule, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/fax/receipts/{receipt_rule_id}'
            .replace('{' + 'receipt_rule_id' + '}', encodeURIComponent(String(receiptRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'receiptRuleId' is not null or undefined
        if (receiptRuleId === null || receiptRuleId === undefined) {
            throw new Error('Required parameter receiptRuleId was null or undefined when calling faxDeliveryReceiptAutomationPut.');
        }
        // verify required parameter 'deliveryReceiptRule' is not null or undefined
        if (deliveryReceiptRule === null || deliveryReceiptRule === undefined) {
            throw new Error('Required parameter deliveryReceiptRule was null or undefined when calling faxDeliveryReceiptAutomationPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deliveryReceiptRule, "DeliveryReceiptRule")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all fax delivery receipt automations
     * @summary Get all fax delivery receipt automations
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    FAXDeliveryReceiptRulesApi.prototype.faxDeliveryReceiptAutomationsGet = function (q, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/fax/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "string");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return FAXDeliveryReceiptRulesApi;
}());
exports.FAXDeliveryReceiptRulesApi = FAXDeliveryReceiptRulesApi;
var InboundFAXRulesApiApiKeys;
(function (InboundFAXRulesApiApiKeys) {
})(InboundFAXRulesApiApiKeys = exports.InboundFAXRulesApiApiKeys || (exports.InboundFAXRulesApiApiKeys = {}));
var InboundFAXRulesApi = /** @class */ (function () {
    function InboundFAXRulesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(InboundFAXRulesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InboundFAXRulesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    InboundFAXRulesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    InboundFAXRulesApi.prototype.setApiKey = function (key, value) {
        this.authentications[InboundFAXRulesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(InboundFAXRulesApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InboundFAXRulesApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Delete inbound fax automation
     * @summary Delete inbound fax automation
     * @param inboundRuleId Inbound rule id
     * @param {*} [options] Override http request options.
     */
    InboundFAXRulesApi.prototype.faxInboundAutomationDelete = function (inboundRuleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/fax/inbound/{inbound_rule_id}'
            .replace('{' + 'inbound_rule_id' + '}', encodeURIComponent(String(inboundRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'inboundRuleId' is not null or undefined
        if (inboundRuleId === null || inboundRuleId === undefined) {
            throw new Error('Required parameter inboundRuleId was null or undefined when calling faxInboundAutomationDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific inbound fax automation
     * @summary Get specific inbound fax automation
     * @param inboundRuleId Inbound rule id
     * @param {*} [options] Override http request options.
     */
    InboundFAXRulesApi.prototype.faxInboundAutomationGet = function (inboundRuleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/fax/inbound/{inbound_rule_id}'
            .replace('{' + 'inbound_rule_id' + '}', encodeURIComponent(String(inboundRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'inboundRuleId' is not null or undefined
        if (inboundRuleId === null || inboundRuleId === undefined) {
            throw new Error('Required parameter inboundRuleId was null or undefined when calling faxInboundAutomationGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create new inbound fax automation
     * @summary Create new inbound fax automation
     * @param inboundFaxRule Inbound fax rule model
     * @param {*} [options] Override http request options.
     */
    InboundFAXRulesApi.prototype.faxInboundAutomationPost = function (inboundFaxRule, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/fax/inbound';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'inboundFaxRule' is not null or undefined
        if (inboundFaxRule === null || inboundFaxRule === undefined) {
            throw new Error('Required parameter inboundFaxRule was null or undefined when calling faxInboundAutomationPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(inboundFaxRule, "InboundFaxRule")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update inbound fax automation
     * @summary Update inbound fax automation
     * @param inboundRuleId Inbound rule id
     * @param inboundFaxRule Inbound fax rule model
     * @param {*} [options] Override http request options.
     */
    InboundFAXRulesApi.prototype.faxInboundAutomationPut = function (inboundRuleId, inboundFaxRule, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/fax/inbound/{inbound_rule_id}'
            .replace('{' + 'inbound_rule_id' + '}', encodeURIComponent(String(inboundRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'inboundRuleId' is not null or undefined
        if (inboundRuleId === null || inboundRuleId === undefined) {
            throw new Error('Required parameter inboundRuleId was null or undefined when calling faxInboundAutomationPut.');
        }
        // verify required parameter 'inboundFaxRule' is not null or undefined
        if (inboundFaxRule === null || inboundFaxRule === undefined) {
            throw new Error('Required parameter inboundFaxRule was null or undefined when calling faxInboundAutomationPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(inboundFaxRule, "InboundFaxRule")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all inbound fax automations
     * @summary Get all inbound fax automations
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    InboundFAXRulesApi.prototype.faxInboundAutomationsGet = function (q, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/fax/inbound';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "string");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return InboundFAXRulesApi;
}());
exports.InboundFAXRulesApi = InboundFAXRulesApi;
var InboundSMSRulesApiApiKeys;
(function (InboundSMSRulesApiApiKeys) {
})(InboundSMSRulesApiApiKeys = exports.InboundSMSRulesApiApiKeys || (exports.InboundSMSRulesApiApiKeys = {}));
var InboundSMSRulesApi = /** @class */ (function () {
    function InboundSMSRulesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(InboundSMSRulesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InboundSMSRulesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    InboundSMSRulesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    InboundSMSRulesApi.prototype.setApiKey = function (key, value) {
        this.authentications[InboundSMSRulesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(InboundSMSRulesApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InboundSMSRulesApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Delete inbound sms automation
     * @summary Delete inbound sms automation
     * @param inboundRuleId Inbound rule id
     * @param {*} [options] Override http request options.
     */
    InboundSMSRulesApi.prototype.smsInboundAutomationDelete = function (inboundRuleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/sms/inbound/{inbound_rule_id}'
            .replace('{' + 'inbound_rule_id' + '}', encodeURIComponent(String(inboundRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'inboundRuleId' is not null or undefined
        if (inboundRuleId === null || inboundRuleId === undefined) {
            throw new Error('Required parameter inboundRuleId was null or undefined when calling smsInboundAutomationDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific inbound sms automation
     * @summary Get specific inbound sms automation
     * @param inboundRuleId Inbound rule id
     * @param {*} [options] Override http request options.
     */
    InboundSMSRulesApi.prototype.smsInboundAutomationGet = function (inboundRuleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/sms/inbound/{inbound_rule_id}'
            .replace('{' + 'inbound_rule_id' + '}', encodeURIComponent(String(inboundRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'inboundRuleId' is not null or undefined
        if (inboundRuleId === null || inboundRuleId === undefined) {
            throw new Error('Required parameter inboundRuleId was null or undefined when calling smsInboundAutomationGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create new inbound sms automation
     * @summary Create new inbound sms automation
     * @param inboundSmsRule Inbound sms rule model
     * @param {*} [options] Override http request options.
     */
    InboundSMSRulesApi.prototype.smsInboundAutomationPost = function (inboundSmsRule, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/sms/inbound';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'inboundSmsRule' is not null or undefined
        if (inboundSmsRule === null || inboundSmsRule === undefined) {
            throw new Error('Required parameter inboundSmsRule was null or undefined when calling smsInboundAutomationPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(inboundSmsRule, "InboundSMSRule")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update inbound sms automation
     * @summary Update inbound sms automation
     * @param inboundRuleId Inbound rule id
     * @param inboundSmsRule Inbound sms rule model
     * @param {*} [options] Override http request options.
     */
    InboundSMSRulesApi.prototype.smsInboundAutomationPut = function (inboundRuleId, inboundSmsRule, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/sms/inbound/{inbound_rule_id}'
            .replace('{' + 'inbound_rule_id' + '}', encodeURIComponent(String(inboundRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'inboundRuleId' is not null or undefined
        if (inboundRuleId === null || inboundRuleId === undefined) {
            throw new Error('Required parameter inboundRuleId was null or undefined when calling smsInboundAutomationPut.');
        }
        // verify required parameter 'inboundSmsRule' is not null or undefined
        if (inboundSmsRule === null || inboundSmsRule === undefined) {
            throw new Error('Required parameter inboundSmsRule was null or undefined when calling smsInboundAutomationPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(inboundSmsRule, "InboundSMSRule")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all inbound sms automations
     * @summary Get all inbound sms automations
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    InboundSMSRulesApi.prototype.smsInboundAutomationsGet = function (q, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/sms/inbound';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "string");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return InboundSMSRulesApi;
}());
exports.InboundSMSRulesApi = InboundSMSRulesApi;
var MMSApiApiKeys;
(function (MMSApiApiKeys) {
})(MMSApiApiKeys = exports.MMSApiApiKeys || (exports.MMSApiApiKeys = {}));
var MMSApi = /** @class */ (function () {
    function MMSApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(MMSApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMSApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    MMSApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    MMSApi.prototype.setApiKey = function (key, value) {
        this.authentications[MMSApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(MMSApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMSApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get Price for MMS sent
     * @summary Get Price for MMS sent
     * @param mmsMessages MmsMessageCollection model
     * @param {*} [options] Override http request options.
     */
    MMSApi.prototype.mmsPricePost = function (mmsMessages, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/mms/price';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'mmsMessages' is not null or undefined
        if (mmsMessages === null || mmsMessages === undefined) {
            throw new Error('Required parameter mmsMessages was null or undefined when calling mmsPricePost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(mmsMessages, "MmsMessageCollection")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all delivery receipts
     * @summary Get all delivery receipts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    MMSApi.prototype.mmsReceiptsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/mms/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Mark delivery receipts as read
     * @summary Mark delivery receipts as read
     * @param dateBefore DateBefore model
     * @param {*} [options] Override http request options.
     */
    MMSApi.prototype.mmsReceiptsReadPut = function (dateBefore, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/mms/receipts-read';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(dateBefore, "DateBefore")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Send MMS
     * @summary Send MMS
     * @param mmsMessages MmsMessageCollection model
     * @param {*} [options] Override http request options.
     */
    MMSApi.prototype.mmsSendPost = function (mmsMessages, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/mms/send';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'mmsMessages' is not null or undefined
        if (mmsMessages === null || mmsMessages === undefined) {
            throw new Error('Required parameter mmsMessages was null or undefined when calling mmsSendPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(mmsMessages, "MmsMessageCollection")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return MMSApi;
}());
exports.MMSApi = MMSApi;
var MasterEmailTemplatesApiApiKeys;
(function (MasterEmailTemplatesApiApiKeys) {
})(MasterEmailTemplatesApiApiKeys = exports.MasterEmailTemplatesApiApiKeys || (exports.MasterEmailTemplatesApiApiKeys = {}));
var MasterEmailTemplatesApi = /** @class */ (function () {
    function MasterEmailTemplatesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(MasterEmailTemplatesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MasterEmailTemplatesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    MasterEmailTemplatesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    MasterEmailTemplatesApi.prototype.setApiKey = function (key, value) {
        this.authentications[MasterEmailTemplatesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(MasterEmailTemplatesApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MasterEmailTemplatesApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get all master email template categories
     * @summary Get all master email template categories
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    MasterEmailTemplatesApi.prototype.masterEmailTemplateCategoriesGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/master-templates-categories';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific master email template category
     * @summary Get specific master email template category
     * @param categoryId Email category id
     * @param {*} [options] Override http request options.
     */
    MasterEmailTemplatesApi.prototype.masterEmailTemplateCategoryGet = function (categoryId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/master-templates-categories/{category_id}'
            .replace('{' + 'category_id' + '}', encodeURIComponent(String(categoryId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'categoryId' is not null or undefined
        if (categoryId === null || categoryId === undefined) {
            throw new Error('Required parameter categoryId was null or undefined when calling masterEmailTemplateCategoryGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific master email template
     * @summary Get specific master email template
     * @param templateId Email template id
     * @param {*} [options] Override http request options.
     */
    MasterEmailTemplatesApi.prototype.masterEmailTemplateGet = function (templateId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/master-templates/{template_id}'
            .replace('{' + 'template_id' + '}', encodeURIComponent(String(templateId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'templateId' is not null or undefined
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling masterEmailTemplateGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all master email templates
     * @summary Get all master email templates
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    MasterEmailTemplatesApi.prototype.masterEmailTemplatesGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/master-templates';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all master email templates in a category
     * @summary Get all master email templates in a category
     * @param categoryId Email category id
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    MasterEmailTemplatesApi.prototype.masterEmailTemplatesInCategoryGet = function (categoryId, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/master-templates-categories/{category_id}/master-templates'
            .replace('{' + 'category_id' + '}', encodeURIComponent(String(categoryId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'categoryId' is not null or undefined
        if (categoryId === null || categoryId === undefined) {
            throw new Error('Required parameter categoryId was null or undefined when calling masterEmailTemplatesInCategoryGet.');
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return MasterEmailTemplatesApi;
}());
exports.MasterEmailTemplatesApi = MasterEmailTemplatesApi;
var MmsCampaignApiApiKeys;
(function (MmsCampaignApiApiKeys) {
})(MmsCampaignApiApiKeys = exports.MmsCampaignApiApiKeys || (exports.MmsCampaignApiApiKeys = {}));
var MmsCampaignApi = /** @class */ (function () {
    function MmsCampaignApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(MmsCampaignApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MmsCampaignApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    MmsCampaignApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    MmsCampaignApi.prototype.setApiKey = function (key, value) {
        this.authentications[MmsCampaignApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(MmsCampaignApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MmsCampaignApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get specific mms campaign
     * @summary Get specific mms campaign
     * @param mmsCampaignId ID of MMS campaign to retrieve
     * @param {*} [options] Override http request options.
     */
    MmsCampaignApi.prototype.mmsCampaignByMmsCampaignIdGet = function (mmsCampaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/mms-campaigns/{mms_campaign_id}'
            .replace('{' + 'mms_campaign_id' + '}', encodeURIComponent(String(mmsCampaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'mmsCampaignId' is not null or undefined
        if (mmsCampaignId === null || mmsCampaignId === undefined) {
            throw new Error('Required parameter mmsCampaignId was null or undefined when calling mmsCampaignByMmsCampaignIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update mms campaign
     * @summary Update mms campaign
     * @param mmsCampaignId ID of MMS campaign to update
     * @param campaign MmsCampaign model
     * @param {*} [options] Override http request options.
     */
    MmsCampaignApi.prototype.mmsCampaignsByMmsCampaignIdPut = function (mmsCampaignId, campaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/mms-campaigns/{mms_campaign_id}'
            .replace('{' + 'mms_campaign_id' + '}', encodeURIComponent(String(mmsCampaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'mmsCampaignId' is not null or undefined
        if (mmsCampaignId === null || mmsCampaignId === undefined) {
            throw new Error('Required parameter mmsCampaignId was null or undefined when calling mmsCampaignsByMmsCampaignIdPut.');
        }
        // verify required parameter 'campaign' is not null or undefined
        if (campaign === null || campaign === undefined) {
            throw new Error('Required parameter campaign was null or undefined when calling mmsCampaignsByMmsCampaignIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(campaign, "MmsCampaign")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Cancel sms campaign
     * @summary Cancel mms campaign
     * @param mmsCampaignId ID of MMS Campaign to cancel
     * @param {*} [options] Override http request options.
     */
    MmsCampaignApi.prototype.mmsCampaignsCancelByMmsCampaignIdPut = function (mmsCampaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/mms-campaigns/{mms_campaign_id}/cancel'
            .replace('{' + 'mms_campaign_id' + '}', encodeURIComponent(String(mmsCampaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'mmsCampaignId' is not null or undefined
        if (mmsCampaignId === null || mmsCampaignId === undefined) {
            throw new Error('Required parameter mmsCampaignId was null or undefined when calling mmsCampaignsCancelByMmsCampaignIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get list of mms campaigns
     * @summary Get list of mms campaigns
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    MmsCampaignApi.prototype.mmsCampaignsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/mms-campaigns';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Calculate price for sms campaign
     * @summary Calculate price for mms campaign
     * @param campaign MmsCampaign model
     * @param {*} [options] Override http request options.
     */
    MmsCampaignApi.prototype.mmsCampaignsPricePost = function (campaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/mms-campaigns/price';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaign' is not null or undefined
        if (campaign === null || campaign === undefined) {
            throw new Error('Required parameter campaign was null or undefined when calling mmsCampaignsPricePost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(campaign, "MmsCampaign")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create mms campaign
     * @summary Create mms campaign
     * @param campaign MmsCampaign model
     * @param {*} [options] Override http request options.
     */
    MmsCampaignApi.prototype.mmsCampaignsSendPost = function (campaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/mms-campaigns/send';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaign' is not null or undefined
        if (campaign === null || campaign === undefined) {
            throw new Error('Required parameter campaign was null or undefined when calling mmsCampaignsSendPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(campaign, "MmsCampaign")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return MmsCampaignApi;
}());
exports.MmsCampaignApi = MmsCampaignApi;
var NumberApiApiKeys;
(function (NumberApiApiKeys) {
})(NumberApiApiKeys = exports.NumberApiApiKeys || (exports.NumberApiApiKeys = {}));
var NumberApi = /** @class */ (function () {
    function NumberApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(NumberApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    NumberApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    NumberApi.prototype.setApiKey = function (key, value) {
        this.authentications[NumberApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(NumberApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Buy dedicated number
     * @summary Buy dedicated number
     * @param dedicatedNumber Phone number to purchase
     * @param {*} [options] Override http request options.
     */
    NumberApi.prototype.numbersBuyByDedicatedNumberPost = function (dedicatedNumber, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/numbers/buy/{dedicated_number}'
            .replace('{' + 'dedicated_number' + '}', encodeURIComponent(String(dedicatedNumber)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'dedicatedNumber' is not null or undefined
        if (dedicatedNumber === null || dedicatedNumber === undefined) {
            throw new Error('Required parameter dedicatedNumber was null or undefined when calling numbersBuyByDedicatedNumberPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all availible dedicated numbers
     * @summary Get all availible dedicated numbers
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    NumberApi.prototype.numbersGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/numbers';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all dedicated numbers by country
     * @summary Get all dedicated numbers by country
     * @param country Country code to search
     * @param search Your search pattern or query.
     * @param searchType Your strategy for searching, 0 &#x3D; starts with, 1 &#x3D; anywhere, 2 &#x3D; ends with.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    NumberApi.prototype.numbersSearchByCountryGet = function (country, search, searchType, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/numbers/search/{country}'
            .replace('{' + 'country' + '}', encodeURIComponent(String(country)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'country' is not null or undefined
        if (country === null || country === undefined) {
            throw new Error('Required parameter country was null or undefined when calling numbersSearchByCountryGet.');
        }
        if (search !== undefined) {
            localVarQueryParameters['search'] = ObjectSerializer.serialize(search, "string");
        }
        if (searchType !== undefined) {
            localVarQueryParameters['search_type'] = ObjectSerializer.serialize(searchType, "number");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return NumberApi;
}());
exports.NumberApi = NumberApi;
var PostLetterApiApiKeys;
(function (PostLetterApiApiKeys) {
})(PostLetterApiApiKeys = exports.PostLetterApiApiKeys || (exports.PostLetterApiApiKeys = {}));
var PostLetterApi = /** @class */ (function () {
    function PostLetterApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(PostLetterApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PostLetterApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    PostLetterApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    PostLetterApi.prototype.setApiKey = function (key, value) {
        this.authentications[PostLetterApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(PostLetterApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PostLetterApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * export post letter history
     * @summary export post letter history
     * @param filename Filename to export to
     * @param {*} [options] Override http request options.
     */
    PostLetterApi.prototype.postLettersExportGet = function (filename, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/letters/history/export';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'filename' is not null or undefined
        if (filename === null || filename === undefined) {
            throw new Error('Required parameter filename was null or undefined when calling postLettersExportGet.');
        }
        if (filename !== undefined) {
            localVarQueryParameters['filename'] = ObjectSerializer.serialize(filename, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all post letter history
     * @summary Get all post letter history
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    PostLetterApi.prototype.postLettersHistoryGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/letters/history';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Calculate post letter price
     * @summary Calculate post letter price
     * @param postLetter PostLetter model
     * @param {*} [options] Override http request options.
     */
    PostLetterApi.prototype.postLettersPricePost = function (postLetter, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/letters/price';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'postLetter' is not null or undefined
        if (postLetter === null || postLetter === undefined) {
            throw new Error('Required parameter postLetter was null or undefined when calling postLettersPricePost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postLetter, "PostLetter")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Send post letter
     * @summary Send post letter
     * @param postLetter PostLetter model
     * @param {*} [options] Override http request options.
     */
    PostLetterApi.prototype.postLettersSendPost = function (postLetter, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/letters/send';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'postLetter' is not null or undefined
        if (postLetter === null || postLetter === undefined) {
            throw new Error('Required parameter postLetter was null or undefined when calling postLettersSendPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postLetter, "PostLetter")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return PostLetterApi;
}());
exports.PostLetterApi = PostLetterApi;
var PostPostcardApiApiKeys;
(function (PostPostcardApiApiKeys) {
})(PostPostcardApiApiKeys = exports.PostPostcardApiApiKeys || (exports.PostPostcardApiApiKeys = {}));
var PostPostcardApi = /** @class */ (function () {
    function PostPostcardApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(PostPostcardApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PostPostcardApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    PostPostcardApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    PostPostcardApi.prototype.setApiKey = function (key, value) {
        this.authentications[PostPostcardApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(PostPostcardApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PostPostcardApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Export postcard history to a CSV file
     * @summary Export postcard history to a CSV file
     * @param filename Filename to export to
     * @param {*} [options] Override http request options.
     */
    PostPostcardApi.prototype.postPostcardsHistoryExportGet = function (filename, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/postcards/history/export';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'filename' is not null or undefined
        if (filename === null || filename === undefined) {
            throw new Error('Required parameter filename was null or undefined when calling postPostcardsHistoryExportGet.');
        }
        if (filename !== undefined) {
            localVarQueryParameters['filename'] = ObjectSerializer.serialize(filename, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Retrieve the history of postcards sent or scheduled
     * @summary Retrieve the history of postcards sent or scheduled
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    PostPostcardApi.prototype.postPostcardsHistoryGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/postcards/history';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Calculate price for sending one or more postcards
     * @summary Calculate price for sending one or more postcards
     * @param postPostcards PostPostcard model
     * @param {*} [options] Override http request options.
     */
    PostPostcardApi.prototype.postPostcardsPricePost = function (postPostcards, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/postcards/price';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'postPostcards' is not null or undefined
        if (postPostcards === null || postPostcards === undefined) {
            throw new Error('Required parameter postPostcards was null or undefined when calling postPostcardsPricePost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postPostcards, "PostPostcard")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Send one or more postcards
     * @summary Send one or more postcards
     * @param postPostcards PostPostcard model
     * @param {*} [options] Override http request options.
     */
    PostPostcardApi.prototype.postPostcardsSendPost = function (postPostcards, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/postcards/send';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'postPostcards' is not null or undefined
        if (postPostcards === null || postPostcards === undefined) {
            throw new Error('Required parameter postPostcards was null or undefined when calling postPostcardsSendPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postPostcards, "PostPostcard")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return PostPostcardApi;
}());
exports.PostPostcardApi = PostPostcardApi;
var PostReturnAddressApiApiKeys;
(function (PostReturnAddressApiApiKeys) {
})(PostReturnAddressApiApiKeys = exports.PostReturnAddressApiApiKeys || (exports.PostReturnAddressApiApiKeys = {}));
var PostReturnAddressApi = /** @class */ (function () {
    function PostReturnAddressApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(PostReturnAddressApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PostReturnAddressApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    PostReturnAddressApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    PostReturnAddressApi.prototype.setApiKey = function (key, value) {
        this.authentications[PostReturnAddressApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(PostReturnAddressApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PostReturnAddressApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Delete specific post return address
     * @summary Delete specific post return address
     * @param returnAddressId Return address ID
     * @param {*} [options] Override http request options.
     */
    PostReturnAddressApi.prototype.postReturnAddressesByReturnAddressIdDelete = function (returnAddressId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/return-addresses/{return_address_id}'
            .replace('{' + 'return_address_id' + '}', encodeURIComponent(String(returnAddressId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'returnAddressId' is not null or undefined
        if (returnAddressId === null || returnAddressId === undefined) {
            throw new Error('Required parameter returnAddressId was null or undefined when calling postReturnAddressesByReturnAddressIdDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific post return address
     * @summary Get specific post return address
     * @param returnAddressId Return address ID
     * @param {*} [options] Override http request options.
     */
    PostReturnAddressApi.prototype.postReturnAddressesByReturnAddressIdGet = function (returnAddressId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/return-addresses/{return_address_id}'
            .replace('{' + 'return_address_id' + '}', encodeURIComponent(String(returnAddressId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'returnAddressId' is not null or undefined
        if (returnAddressId === null || returnAddressId === undefined) {
            throw new Error('Required parameter returnAddressId was null or undefined when calling postReturnAddressesByReturnAddressIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update post return address
     * @summary Update post return address
     * @param returnAddressId Return address ID
     * @param returnAddress Address model
     * @param {*} [options] Override http request options.
     */
    PostReturnAddressApi.prototype.postReturnAddressesByReturnAddressIdPut = function (returnAddressId, returnAddress, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/return-addresses/{return_address_id}'
            .replace('{' + 'return_address_id' + '}', encodeURIComponent(String(returnAddressId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'returnAddressId' is not null or undefined
        if (returnAddressId === null || returnAddressId === undefined) {
            throw new Error('Required parameter returnAddressId was null or undefined when calling postReturnAddressesByReturnAddressIdPut.');
        }
        // verify required parameter 'returnAddress' is not null or undefined
        if (returnAddress === null || returnAddress === undefined) {
            throw new Error('Required parameter returnAddress was null or undefined when calling postReturnAddressesByReturnAddressIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(returnAddress, "Address")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get list of post return addresses
     * @summary Get list of post return addresses
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    PostReturnAddressApi.prototype.postReturnAddressesGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/return-addresses';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create post return address
     * @summary Create post return address
     * @param returnAddress Address model
     * @param {*} [options] Override http request options.
     */
    PostReturnAddressApi.prototype.postReturnAddressesPost = function (returnAddress, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/post/return-addresses';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'returnAddress' is not null or undefined
        if (returnAddress === null || returnAddress === undefined) {
            throw new Error('Required parameter returnAddress was null or undefined when calling postReturnAddressesPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(returnAddress, "Address")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return PostReturnAddressApi;
}());
exports.PostReturnAddressApi = PostReturnAddressApi;
var ReferralAccountApiApiKeys;
(function (ReferralAccountApiApiKeys) {
})(ReferralAccountApiApiKeys = exports.ReferralAccountApiApiKeys || (exports.ReferralAccountApiApiKeys = {}));
var ReferralAccountApi = /** @class */ (function () {
    function ReferralAccountApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ReferralAccountApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReferralAccountApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    ReferralAccountApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ReferralAccountApi.prototype.setApiKey = function (key, value) {
        this.authentications[ReferralAccountApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(ReferralAccountApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReferralAccountApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get all referral accounts
     * @summary Get all referral accounts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    ReferralAccountApi.prototype.referralAccountsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/referral/accounts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ReferralAccountApi;
}());
exports.ReferralAccountApi = ReferralAccountApi;
var ResellerAccountApiApiKeys;
(function (ResellerAccountApiApiKeys) {
})(ResellerAccountApiApiKeys = exports.ResellerAccountApiApiKeys || (exports.ResellerAccountApiApiKeys = {}));
var ResellerAccountApi = /** @class */ (function () {
    function ResellerAccountApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ResellerAccountApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResellerAccountApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    ResellerAccountApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ResellerAccountApi.prototype.setApiKey = function (key, value) {
        this.authentications[ResellerAccountApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(ResellerAccountApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResellerAccountApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get Reseller clients Account
     * @summary Get Reseller clients Account
     * @param clientUserId User ID of client
     * @param {*} [options] Override http request options.
     */
    ResellerAccountApi.prototype.resellerAccountsByClientUserIdGet = function (clientUserId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/accounts/{client_user_id}'
            .replace('{' + 'client_user_id' + '}', encodeURIComponent(String(clientUserId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'clientUserId' is not null or undefined
        if (clientUserId === null || clientUserId === undefined) {
            throw new Error('Required parameter clientUserId was null or undefined when calling resellerAccountsByClientUserIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update Reseller clients Account
     * @summary Update Reseller clients Account
     * @param clientUserId User ID of client
     * @param resellerAccount ResellerAccount model
     * @param {*} [options] Override http request options.
     */
    ResellerAccountApi.prototype.resellerAccountsByClientUserIdPut = function (clientUserId, resellerAccount, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/accounts/{client_user_id}'
            .replace('{' + 'client_user_id' + '}', encodeURIComponent(String(clientUserId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'clientUserId' is not null or undefined
        if (clientUserId === null || clientUserId === undefined) {
            throw new Error('Required parameter clientUserId was null or undefined when calling resellerAccountsByClientUserIdPut.');
        }
        // verify required parameter 'resellerAccount' is not null or undefined
        if (resellerAccount === null || resellerAccount === undefined) {
            throw new Error('Required parameter resellerAccount was null or undefined when calling resellerAccountsByClientUserIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(resellerAccount, "ResellerAccount")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get list of reseller accounts
     * @summary Get list of reseller accounts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    ResellerAccountApi.prototype.resellerAccountsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/accounts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create reseller account
     * @summary Create reseller account
     * @param resellerAccount ResellerAccount model
     * @param {*} [options] Override http request options.
     */
    ResellerAccountApi.prototype.resellerAccountsPost = function (resellerAccount, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/accounts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'resellerAccount' is not null or undefined
        if (resellerAccount === null || resellerAccount === undefined) {
            throw new Error('Required parameter resellerAccount was null or undefined when calling resellerAccountsPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(resellerAccount, "ResellerAccount")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ResellerAccountApi;
}());
exports.ResellerAccountApi = ResellerAccountApi;
var SMSApiApiKeys;
(function (SMSApiApiKeys) {
})(SMSApiApiKeys = exports.SMSApiApiKeys || (exports.SMSApiApiKeys = {}));
var SMSApi = /** @class */ (function () {
    function SMSApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SMSApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SMSApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    SMSApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    SMSApi.prototype.setApiKey = function (key, value) {
        this.authentications[SMSApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(SMSApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SMSApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Update all scheduled message as cancelled
     * @summary Update all scheduled message as cancelled
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsCancelAllPut = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/cancel-all';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update scheduled message as cancelled
     * @summary Update scheduled message as cancelled
     * @param messageId The message ID you want to cancel
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsCancelByMessageIdPut = function (messageId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/{message_id}/cancel'
            .replace('{' + 'message_id' + '}', encodeURIComponent(String(messageId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'messageId' is not null or undefined
        if (messageId === null || messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling smsCancelByMessageIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Export all sms history
     * @summary Export all sms history
     * @param filename Filename to download history as
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsHistoryExportGet = function (filename, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/history/export';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'filename' is not null or undefined
        if (filename === null || filename === undefined) {
            throw new Error('Required parameter filename was null or undefined when calling smsHistoryExportGet.');
        }
        if (filename !== undefined) {
            localVarQueryParameters['filename'] = ObjectSerializer.serialize(filename, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all sms history
     * @summary Get all sms history
     * @param q Custom query Example: from:{number},status_code:201.
     * @param dateFrom Start date
     * @param dateTo End date
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsHistoryGet = function (q, dateFrom, dateTo, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/history';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "string");
        }
        if (dateFrom !== undefined) {
            localVarQueryParameters['date_from'] = ObjectSerializer.serialize(dateFrom, "number");
        }
        if (dateTo !== undefined) {
            localVarQueryParameters['date_to'] = ObjectSerializer.serialize(dateTo, "number");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all inbound sms
     * @summary Get all inbound sms
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsInboundGet = function (q, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/inbound';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "string");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create inbound sms
     * @summary Create inbound sms
     * @param url Url model
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsInboundPost = function (url, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/inbound';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'url' is not null or undefined
        if (url === null || url === undefined) {
            throw new Error('Required parameter url was null or undefined when calling smsInboundPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(url, "Url")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Mark specific inbound SMS as read
     * @summary Mark inbound SMS as read
     * @param messageId Message ID
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsInboundReadByMessageIdPut = function (messageId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/inbound-read/{message_id}'
            .replace('{' + 'message_id' + '}', encodeURIComponent(String(messageId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'messageId' is not null or undefined
        if (messageId === null || messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling smsInboundReadByMessageIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Mark all inbound SMS as read optionally before a certain date
     * @summary Mark inbound SMS as read
     * @param dateBefore DateBefore model
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsInboundReadPut = function (dateBefore, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/inbound-read';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(dateBefore, "DateBefore")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Calculate sms price
     * @summary Calculate sms price
     * @param smsMessages SmsMessageCollection model
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsPricePost = function (smsMessages, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/price';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'smsMessages' is not null or undefined
        if (smsMessages === null || smsMessages === undefined) {
            throw new Error('Required parameter smsMessages was null or undefined when calling smsPricePost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(smsMessages, "SmsMessageCollection")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get a Specific Delivery Receipt
     * @summary Get a Specific Delivery Receipt
     * @param messageId Message ID
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsReceiptsByMessageIdGet = function (messageId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/receipts/{message_id}'
            .replace('{' + 'message_id' + '}', encodeURIComponent(String(messageId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'messageId' is not null or undefined
        if (messageId === null || messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling smsReceiptsByMessageIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all delivery receipts
     * @summary Get all delivery receipts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsReceiptsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Add a delivery receipt
     * @summary Add a delivery receipt
     * @param url Url model
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsReceiptsPost = function (url, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'url' is not null or undefined
        if (url === null || url === undefined) {
            throw new Error('Required parameter url was null or undefined when calling smsReceiptsPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(url, "Url")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Mark delivery receipts as read
     * @summary Mark delivery receipts as read
     * @param dateBefore DateBefore model
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsReceiptsReadPut = function (dateBefore, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/receipts-read';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(dateBefore, "DateBefore")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *  # Send one or more SMS messages  You can post up to 1000 messages with each API call. You can send to a mix of contacts and contact lists, as long as the total number of recipients is up to 1000.  The response contains status and details for each recipient.  *Refer to [Application Status Codes](https://dashboard.clicksend.com/#/signup/step1/) for the possible response message status strings.*
     * @summary Send sms message(s)
     * @param smsMessages SmsMessageCollection model
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsSendPost = function (smsMessages, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/send';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'smsMessages' is not null or undefined
        if (smsMessages === null || smsMessages === undefined) {
            throw new Error('Required parameter smsMessages was null or undefined when calling smsSendPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(smsMessages, "SmsMessageCollection")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Delete sms template
     * @summary Delete sms template
     * @param templateId Template id
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsTemplatesByTemplateIdDelete = function (templateId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/templates/{template_id}'
            .replace('{' + 'template_id' + '}', encodeURIComponent(String(templateId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'templateId' is not null or undefined
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling smsTemplatesByTemplateIdDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update sms template
     * @summary Update sms template
     * @param templateId Template id
     * @param smsTemplate Template item
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsTemplatesByTemplateIdPut = function (templateId, smsTemplate, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/templates/{template_id}'
            .replace('{' + 'template_id' + '}', encodeURIComponent(String(templateId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'templateId' is not null or undefined
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling smsTemplatesByTemplateIdPut.');
        }
        // verify required parameter 'smsTemplate' is not null or undefined
        if (smsTemplate === null || smsTemplate === undefined) {
            throw new Error('Required parameter smsTemplate was null or undefined when calling smsTemplatesByTemplateIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(smsTemplate, "SmsTemplate")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get lists of all sms templates
     * @summary Get lists of all sms templates
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsTemplatesGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/templates';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create sms template
     * @summary Create sms template
     * @param smsTemplate SmsTemplate model
     * @param {*} [options] Override http request options.
     */
    SMSApi.prototype.smsTemplatesPost = function (smsTemplate, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms/templates';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'smsTemplate' is not null or undefined
        if (smsTemplate === null || smsTemplate === undefined) {
            throw new Error('Required parameter smsTemplate was null or undefined when calling smsTemplatesPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(smsTemplate, "SmsTemplate")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return SMSApi;
}());
exports.SMSApi = SMSApi;
var SMSDeliveryReceiptRulesApiApiKeys;
(function (SMSDeliveryReceiptRulesApiApiKeys) {
})(SMSDeliveryReceiptRulesApiApiKeys = exports.SMSDeliveryReceiptRulesApiApiKeys || (exports.SMSDeliveryReceiptRulesApiApiKeys = {}));
var SMSDeliveryReceiptRulesApi = /** @class */ (function () {
    function SMSDeliveryReceiptRulesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SMSDeliveryReceiptRulesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SMSDeliveryReceiptRulesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    SMSDeliveryReceiptRulesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    SMSDeliveryReceiptRulesApi.prototype.setApiKey = function (key, value) {
        this.authentications[SMSDeliveryReceiptRulesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(SMSDeliveryReceiptRulesApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SMSDeliveryReceiptRulesApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Delete sms delivery receipt automation
     * @summary Delete sms delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    SMSDeliveryReceiptRulesApi.prototype.smsDeliveryReceiptAutomationDelete = function (receiptRuleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/sms/receipts/{receipt_rule_id}'
            .replace('{' + 'receipt_rule_id' + '}', encodeURIComponent(String(receiptRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'receiptRuleId' is not null or undefined
        if (receiptRuleId === null || receiptRuleId === undefined) {
            throw new Error('Required parameter receiptRuleId was null or undefined when calling smsDeliveryReceiptAutomationDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific sms delivery receipt automation
     * @summary Get specific sms delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    SMSDeliveryReceiptRulesApi.prototype.smsDeliveryReceiptAutomationGet = function (receiptRuleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/sms/receipts/{receipt_rule_id}'
            .replace('{' + 'receipt_rule_id' + '}', encodeURIComponent(String(receiptRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'receiptRuleId' is not null or undefined
        if (receiptRuleId === null || receiptRuleId === undefined) {
            throw new Error('Required parameter receiptRuleId was null or undefined when calling smsDeliveryReceiptAutomationGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create sms delivery receipt automations
     * @summary Create sms delivery receipt automations
     * @param deliveryReceiptRule sms delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    SMSDeliveryReceiptRulesApi.prototype.smsDeliveryReceiptAutomationPost = function (deliveryReceiptRule, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/sms/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'deliveryReceiptRule' is not null or undefined
        if (deliveryReceiptRule === null || deliveryReceiptRule === undefined) {
            throw new Error('Required parameter deliveryReceiptRule was null or undefined when calling smsDeliveryReceiptAutomationPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deliveryReceiptRule, "DeliveryReceiptRule")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update sms delivery receipt automation
     * @summary Update sms delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param deliveryReceiptRule Delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    SMSDeliveryReceiptRulesApi.prototype.smsDeliveryReceiptAutomationPut = function (receiptRuleId, deliveryReceiptRule, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/sms/receipts/{receipt_rule_id}'
            .replace('{' + 'receipt_rule_id' + '}', encodeURIComponent(String(receiptRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'receiptRuleId' is not null or undefined
        if (receiptRuleId === null || receiptRuleId === undefined) {
            throw new Error('Required parameter receiptRuleId was null or undefined when calling smsDeliveryReceiptAutomationPut.');
        }
        // verify required parameter 'deliveryReceiptRule' is not null or undefined
        if (deliveryReceiptRule === null || deliveryReceiptRule === undefined) {
            throw new Error('Required parameter deliveryReceiptRule was null or undefined when calling smsDeliveryReceiptAutomationPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deliveryReceiptRule, "DeliveryReceiptRule")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all sms delivery receipt automations
     * @summary Get all sms delivery receipt automations
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    SMSDeliveryReceiptRulesApi.prototype.smsDeliveryReceiptAutomationsGet = function (q, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/sms/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "string");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return SMSDeliveryReceiptRulesApi;
}());
exports.SMSDeliveryReceiptRulesApi = SMSDeliveryReceiptRulesApi;
var SearchApiApiKeys;
(function (SearchApiApiKeys) {
})(SearchApiApiKeys = exports.SearchApiApiKeys || (exports.SearchApiApiKeys = {}));
var SearchApi = /** @class */ (function () {
    function SearchApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SearchApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    SearchApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    SearchApi.prototype.setApiKey = function (key, value) {
        this.authentications[SearchApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(SearchApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get list of searched contact list
     * @summary Get list of searched contact list
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    SearchApi.prototype.searchContactsListsGet = function (q, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/search/contacts-lists';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'q' is not null or undefined
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling searchContactsListsGet.');
        }
        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "string");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return SearchApi;
}());
exports.SearchApi = SearchApi;
var SmsCampaignApiApiKeys;
(function (SmsCampaignApiApiKeys) {
})(SmsCampaignApiApiKeys = exports.SmsCampaignApiApiKeys || (exports.SmsCampaignApiApiKeys = {}));
var SmsCampaignApi = /** @class */ (function () {
    function SmsCampaignApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SmsCampaignApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SmsCampaignApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    SmsCampaignApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    SmsCampaignApi.prototype.setApiKey = function (key, value) {
        this.authentications[SmsCampaignApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(SmsCampaignApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SmsCampaignApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get specific sms campaign
     * @summary Get specific sms campaign
     * @param smsCampaignId ID of SMS campaign to retrieve
     * @param {*} [options] Override http request options.
     */
    SmsCampaignApi.prototype.smsCampaignBySmsCampaignIdGet = function (smsCampaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms-campaigns/{sms_campaign_id}'
            .replace('{' + 'sms_campaign_id' + '}', encodeURIComponent(String(smsCampaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'smsCampaignId' is not null or undefined
        if (smsCampaignId === null || smsCampaignId === undefined) {
            throw new Error('Required parameter smsCampaignId was null or undefined when calling smsCampaignBySmsCampaignIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update sms campaign
     * @summary Update sms campaign
     * @param smsCampaignId ID of SMS campaign to update
     * @param campaign SmsCampaign model
     * @param {*} [options] Override http request options.
     */
    SmsCampaignApi.prototype.smsCampaignsBySmsCampaignIdPut = function (smsCampaignId, campaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms-campaigns/{sms_campaign_id}'
            .replace('{' + 'sms_campaign_id' + '}', encodeURIComponent(String(smsCampaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'smsCampaignId' is not null or undefined
        if (smsCampaignId === null || smsCampaignId === undefined) {
            throw new Error('Required parameter smsCampaignId was null or undefined when calling smsCampaignsBySmsCampaignIdPut.');
        }
        // verify required parameter 'campaign' is not null or undefined
        if (campaign === null || campaign === undefined) {
            throw new Error('Required parameter campaign was null or undefined when calling smsCampaignsBySmsCampaignIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(campaign, "SmsCampaign")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Cancel sms campaign
     * @summary Cancel sms campaign
     * @param smsCampaignId ID of SMS Campaign to cancel
     * @param {*} [options] Override http request options.
     */
    SmsCampaignApi.prototype.smsCampaignsCancelBySmsCampaignIdPut = function (smsCampaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms-campaigns/{sms_campaign_id}/cancel'
            .replace('{' + 'sms_campaign_id' + '}', encodeURIComponent(String(smsCampaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'smsCampaignId' is not null or undefined
        if (smsCampaignId === null || smsCampaignId === undefined) {
            throw new Error('Required parameter smsCampaignId was null or undefined when calling smsCampaignsCancelBySmsCampaignIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get list of sms campaigns
     * @summary Get list of sms campaigns
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    SmsCampaignApi.prototype.smsCampaignsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms-campaigns';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Calculate price for sms campaign
     * @summary Calculate price for sms campaign
     * @param campaign SmsCampaign model
     * @param {*} [options] Override http request options.
     */
    SmsCampaignApi.prototype.smsCampaignsPricePost = function (campaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms-campaigns/price';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaign' is not null or undefined
        if (campaign === null || campaign === undefined) {
            throw new Error('Required parameter campaign was null or undefined when calling smsCampaignsPricePost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(campaign, "SmsCampaign")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create sms campaign
     * @summary Create sms campaign
     * @param campaign SmsCampaign model
     * @param {*} [options] Override http request options.
     */
    SmsCampaignApi.prototype.smsCampaignsSendPost = function (campaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/sms-campaigns/send';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaign' is not null or undefined
        if (campaign === null || campaign === undefined) {
            throw new Error('Required parameter campaign was null or undefined when calling smsCampaignsSendPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(campaign, "SmsCampaign")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return SmsCampaignApi;
}());
exports.SmsCampaignApi = SmsCampaignApi;
var StatisticsApiApiKeys;
(function (StatisticsApiApiKeys) {
})(StatisticsApiApiKeys = exports.StatisticsApiApiKeys || (exports.StatisticsApiApiKeys = {}));
var StatisticsApi = /** @class */ (function () {
    function StatisticsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(StatisticsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatisticsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    StatisticsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    StatisticsApi.prototype.setApiKey = function (key, value) {
        this.authentications[StatisticsApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(StatisticsApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatisticsApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get sms statistics
     * @summary Get sms statistics
     * @param {*} [options] Override http request options.
     */
    StatisticsApi.prototype.statisticsSmsGet = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/statistics/sms';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get voice statistics
     * @summary Get voice statistics
     * @param {*} [options] Override http request options.
     */
    StatisticsApi.prototype.statisticsVoiceGet = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/statistics/voice';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return StatisticsApi;
}());
exports.StatisticsApi = StatisticsApi;
var SubaccountApiApiKeys;
(function (SubaccountApiApiKeys) {
})(SubaccountApiApiKeys = exports.SubaccountApiApiKeys || (exports.SubaccountApiApiKeys = {}));
var SubaccountApi = /** @class */ (function () {
    function SubaccountApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SubaccountApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubaccountApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    SubaccountApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    SubaccountApi.prototype.setApiKey = function (key, value) {
        this.authentications[SubaccountApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(SubaccountApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubaccountApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Delete a subaccount
     * @summary Delete a subaccount
     * @param subaccountId ID of subaccount to delete
     * @param {*} [options] Override http request options.
     */
    SubaccountApi.prototype.subaccountsBySubaccountIdDelete = function (subaccountId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/subaccounts/{subaccount_id}'
            .replace('{' + 'subaccount_id' + '}', encodeURIComponent(String(subaccountId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'subaccountId' is not null or undefined
        if (subaccountId === null || subaccountId === undefined) {
            throw new Error('Required parameter subaccountId was null or undefined when calling subaccountsBySubaccountIdDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific subaccount
     * @summary Get specific subaccount
     * @param subaccountId ID of subaccount to get
     * @param {*} [options] Override http request options.
     */
    SubaccountApi.prototype.subaccountsBySubaccountIdGet = function (subaccountId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/subaccounts/{subaccount_id}'
            .replace('{' + 'subaccount_id' + '}', encodeURIComponent(String(subaccountId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'subaccountId' is not null or undefined
        if (subaccountId === null || subaccountId === undefined) {
            throw new Error('Required parameter subaccountId was null or undefined when calling subaccountsBySubaccountIdGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update subaccount
     * @summary Update subaccount
     * @param subaccountId ID of subaccount to update
     * @param subaccount Subaccount model
     * @param {*} [options] Override http request options.
     */
    SubaccountApi.prototype.subaccountsBySubaccountIdPut = function (subaccountId, subaccount, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/subaccounts/{subaccount_id}'
            .replace('{' + 'subaccount_id' + '}', encodeURIComponent(String(subaccountId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'subaccountId' is not null or undefined
        if (subaccountId === null || subaccountId === undefined) {
            throw new Error('Required parameter subaccountId was null or undefined when calling subaccountsBySubaccountIdPut.');
        }
        // verify required parameter 'subaccount' is not null or undefined
        if (subaccount === null || subaccount === undefined) {
            throw new Error('Required parameter subaccount was null or undefined when calling subaccountsBySubaccountIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(subaccount, "Subaccount")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all subaccounts
     * @summary Get all subaccounts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    SubaccountApi.prototype.subaccountsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/subaccounts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create new subaccount
     * @summary Create new subaccount
     * @param subaccount Subaccount model
     * @param {*} [options] Override http request options.
     */
    SubaccountApi.prototype.subaccountsPost = function (subaccount, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/subaccounts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'subaccount' is not null or undefined
        if (subaccount === null || subaccount === undefined) {
            throw new Error('Required parameter subaccount was null or undefined when calling subaccountsPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(subaccount, "Subaccount")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Regenerate an API Key
     * @summary Regenerate an API Key
     * @param subaccountId ID of subaccount to regenerate API key for
     * @param {*} [options] Override http request options.
     */
    SubaccountApi.prototype.subaccountsRegenApiKeyBySubaccountIdPut = function (subaccountId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/subaccounts/{subaccount_id}/regen-api-key'
            .replace('{' + 'subaccount_id' + '}', encodeURIComponent(String(subaccountId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'subaccountId' is not null or undefined
        if (subaccountId === null || subaccountId === undefined) {
            throw new Error('Required parameter subaccountId was null or undefined when calling subaccountsRegenApiKeyBySubaccountIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return SubaccountApi;
}());
exports.SubaccountApi = SubaccountApi;
var TimezonesApiApiKeys;
(function (TimezonesApiApiKeys) {
})(TimezonesApiApiKeys = exports.TimezonesApiApiKeys || (exports.TimezonesApiApiKeys = {}));
var TimezonesApi = /** @class */ (function () {
    function TimezonesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(TimezonesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimezonesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    TimezonesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    TimezonesApi.prototype.setApiKey = function (key, value) {
        this.authentications[TimezonesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(TimezonesApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimezonesApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get supported list of timezones.
     * @summary Get supported list of timezones.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    TimezonesApi.prototype.timezonesGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/timezones';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return TimezonesApi;
}());
exports.TimezonesApi = TimezonesApi;
var TransactionalEmailApiApiKeys;
(function (TransactionalEmailApiApiKeys) {
})(TransactionalEmailApiApiKeys = exports.TransactionalEmailApiApiKeys || (exports.TransactionalEmailApiApiKeys = {}));
var TransactionalEmailApi = /** @class */ (function () {
    function TransactionalEmailApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(TransactionalEmailApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TransactionalEmailApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    TransactionalEmailApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    TransactionalEmailApi.prototype.setApiKey = function (key, value) {
        this.authentications[TransactionalEmailApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(TransactionalEmailApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TransactionalEmailApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Export all Transactional Email history
     * @summary Export all Transactional Email history
     * @param filename Filename to download history as
     * @param dateFrom Start date
     * @param dateTo End date
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailApi.prototype.emailHistoryExportGet = function (filename, dateFrom, dateTo, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/history/export';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'filename' is not null or undefined
        if (filename === null || filename === undefined) {
            throw new Error('Required parameter filename was null or undefined when calling emailHistoryExportGet.');
        }
        if (filename !== undefined) {
            localVarQueryParameters['filename'] = ObjectSerializer.serialize(filename, "string");
        }
        if (dateFrom !== undefined) {
            localVarQueryParameters['date_from'] = ObjectSerializer.serialize(dateFrom, "number");
        }
        if (dateTo !== undefined) {
            localVarQueryParameters['date_to'] = ObjectSerializer.serialize(dateTo, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all transactional email history
     * @summary Get all transactional email history
     * @param dateFrom Start date
     * @param dateTo End date
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailApi.prototype.emailHistoryGet = function (dateFrom, dateTo, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/history';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (dateFrom !== undefined) {
            localVarQueryParameters['date_from'] = ObjectSerializer.serialize(dateFrom, "number");
        }
        if (dateTo !== undefined) {
            localVarQueryParameters['date_to'] = ObjectSerializer.serialize(dateTo, "number");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get transactional email price
     * @summary Get transactional email price
     * @param email Email model
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailApi.prototype.emailPricePost = function (email, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/price';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling emailPricePost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(email, "Email")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Send transactional email
     * @summary Send transactional email
     * @param email Email model
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailApi.prototype.emailSendPost = function (email, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/send';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling emailSendPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(email, "Email")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return TransactionalEmailApi;
}());
exports.TransactionalEmailApi = TransactionalEmailApi;
var TransferCreditApiApiKeys;
(function (TransferCreditApiApiKeys) {
})(TransferCreditApiApiKeys = exports.TransferCreditApiApiKeys || (exports.TransferCreditApiApiKeys = {}));
var TransferCreditApi = /** @class */ (function () {
    function TransferCreditApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(TransferCreditApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TransferCreditApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    TransferCreditApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    TransferCreditApi.prototype.setApiKey = function (key, value) {
        this.authentications[TransferCreditApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(TransferCreditApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TransferCreditApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Transfer Credit
     * @summary Transfer Credit
     * @param resellerAccountTransferCredit ResellerAccountTransferCredit model
     * @param {*} [options] Override http request options.
     */
    TransferCreditApi.prototype.resellerTransferCreditPut = function (resellerAccountTransferCredit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/transfer-credit';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'resellerAccountTransferCredit' is not null or undefined
        if (resellerAccountTransferCredit === null || resellerAccountTransferCredit === undefined) {
            throw new Error('Required parameter resellerAccountTransferCredit was null or undefined when calling resellerTransferCreditPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(resellerAccountTransferCredit, "ResellerAccountTransferCredit")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return TransferCreditApi;
}());
exports.TransferCreditApi = TransferCreditApi;
var UploadApiApiKeys;
(function (UploadApiApiKeys) {
})(UploadApiApiKeys = exports.UploadApiApiKeys || (exports.UploadApiApiKeys = {}));
var UploadApi = /** @class */ (function () {
    function UploadApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(UploadApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    UploadApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    UploadApi.prototype.setApiKey = function (key, value) {
        this.authentications[UploadApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(UploadApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Upload File
     * @summary Upload File
     * @param uploadFile Your file to be uploaded
     * @param convert
     * @param {*} [options] Override http request options.
     */
    UploadApi.prototype.uploadsPost = function (uploadFile, convert, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/uploads';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'uploadFile' is not null or undefined
        if (uploadFile === null || uploadFile === undefined) {
            throw new Error('Required parameter uploadFile was null or undefined when calling uploadsPost.');
        }
        // verify required parameter 'convert' is not null or undefined
        if (convert === null || convert === undefined) {
            throw new Error('Required parameter convert was null or undefined when calling uploadsPost.');
        }
        if (convert !== undefined) {
            localVarQueryParameters['convert'] = ObjectSerializer.serialize(convert, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(uploadFile, "UploadFile")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return UploadApi;
}());
exports.UploadApi = UploadApi;
var UserEmailTemplatesApiApiKeys;
(function (UserEmailTemplatesApiApiKeys) {
})(UserEmailTemplatesApiApiKeys = exports.UserEmailTemplatesApiApiKeys || (exports.UserEmailTemplatesApiApiKeys = {}));
var UserEmailTemplatesApi = /** @class */ (function () {
    function UserEmailTemplatesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(UserEmailTemplatesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserEmailTemplatesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    UserEmailTemplatesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    UserEmailTemplatesApi.prototype.setApiKey = function (key, value) {
        this.authentications[UserEmailTemplatesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(UserEmailTemplatesApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserEmailTemplatesApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Delete user email template
     * @summary Delete user email template
     * @param templateId Email template id
     * @param {*} [options] Override http request options.
     */
    UserEmailTemplatesApi.prototype.emailTemplateDelete = function (templateId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/templates/{template_id}'
            .replace('{' + 'template_id' + '}', encodeURIComponent(String(templateId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'templateId' is not null or undefined
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling emailTemplateDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific user email templates
     * @summary Get specific user email template
     * @param templateId Email template id
     * @param {*} [options] Override http request options.
     */
    UserEmailTemplatesApi.prototype.emailTemplateGet = function (templateId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/templates/{template_id}'
            .replace('{' + 'template_id' + '}', encodeURIComponent(String(templateId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'templateId' is not null or undefined
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling emailTemplateGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create email template
     * @summary Create email template
     * @param emailTemplate Email template model
     * @param {*} [options] Override http request options.
     */
    UserEmailTemplatesApi.prototype.emailTemplatePost = function (emailTemplate, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/templates';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailTemplate' is not null or undefined
        if (emailTemplate === null || emailTemplate === undefined) {
            throw new Error('Required parameter emailTemplate was null or undefined when calling emailTemplatePost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailTemplate, "EmailTemplateNew")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update email template
     * @summary Update email template
     * @param templateId Email template id
     * @param emailTemplate Email template model
     * @param {*} [options] Override http request options.
     */
    UserEmailTemplatesApi.prototype.emailTemplatePut = function (templateId, emailTemplate, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/templates/{template_id}'
            .replace('{' + 'template_id' + '}', encodeURIComponent(String(templateId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'templateId' is not null or undefined
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling emailTemplatePut.');
        }
        // verify required parameter 'emailTemplate' is not null or undefined
        if (emailTemplate === null || emailTemplate === undefined) {
            throw new Error('Required parameter emailTemplate was null or undefined when calling emailTemplatePut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailTemplate, "EmailTemplateUpdate")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all user email templates
     * @summary Get all user email templates
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    UserEmailTemplatesApi.prototype.emailTemplatesGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/email/templates';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return UserEmailTemplatesApi;
}());
exports.UserEmailTemplatesApi = UserEmailTemplatesApi;
var VoiceApiApiKeys;
(function (VoiceApiApiKeys) {
})(VoiceApiApiKeys = exports.VoiceApiApiKeys || (exports.VoiceApiApiKeys = {}));
var VoiceApi = /** @class */ (function () {
    function VoiceApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(VoiceApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VoiceApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    VoiceApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    VoiceApi.prototype.setApiKey = function (key, value) {
        this.authentications[VoiceApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(VoiceApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VoiceApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Update all voice messages as cancelled
     * @summary Update all voice messages as cancelled
     * @param {*} [options] Override http request options.
     */
    VoiceApi.prototype.voiceCancelAllPut = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/voice/cancel-all';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update voice message status as cancelled
     * @summary Update voice message status as cancelled
     * @param messageId Your voice message id
     * @param {*} [options] Override http request options.
     */
    VoiceApi.prototype.voiceCancelByMessageIdPut = function (messageId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/voice/{message_id}/cancel'
            .replace('{' + 'message_id' + '}', encodeURIComponent(String(messageId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'messageId' is not null or undefined
        if (messageId === null || messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling voiceCancelByMessageIdPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Export voice history
     * @summary Export voice history
     * @param filename Filename to export to
     * @param {*} [options] Override http request options.
     */
    VoiceApi.prototype.voiceHistoryExportGet = function (filename, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/voice/history/export';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'filename' is not null or undefined
        if (filename === null || filename === undefined) {
            throw new Error('Required parameter filename was null or undefined when calling voiceHistoryExportGet.');
        }
        if (filename !== undefined) {
            localVarQueryParameters['filename'] = ObjectSerializer.serialize(filename, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all voice history
     * @summary Get all voice history
     * @param dateFrom Timestamp (from) used to show records by date.
     * @param dateTo Timestamp (to) used to show records by date
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    VoiceApi.prototype.voiceHistoryGet = function (dateFrom, dateTo, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/voice/history';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (dateFrom !== undefined) {
            localVarQueryParameters['date_from'] = ObjectSerializer.serialize(dateFrom, "number");
        }
        if (dateTo !== undefined) {
            localVarQueryParameters['date_to'] = ObjectSerializer.serialize(dateTo, "number");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all voice languages
     * @summary Get all voice languages
     * @param {*} [options] Override http request options.
     */
    VoiceApi.prototype.voiceLangGet = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/voice/lang';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Calculate voice price
     * @summary Calculate voice price
     * @param voiceMessages VoiceMessageCollection model
     * @param {*} [options] Override http request options.
     */
    VoiceApi.prototype.voicePricePost = function (voiceMessages, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/voice/price';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'voiceMessages' is not null or undefined
        if (voiceMessages === null || voiceMessages === undefined) {
            throw new Error('Required parameter voiceMessages was null or undefined when calling voicePricePost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(voiceMessages, "VoiceMessageCollection")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all delivery receipts
     * @summary Get all delivery receipts
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    VoiceApi.prototype.voiceReceiptsGet = function (page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/voice/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Add a delivery receipt
     * @summary Add a delivery receipt
     * @param url Url model
     * @param {*} [options] Override http request options.
     */
    VoiceApi.prototype.voiceReceiptsPost = function (url, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/voice/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'url' is not null or undefined
        if (url === null || url === undefined) {
            throw new Error('Required parameter url was null or undefined when calling voiceReceiptsPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(url, "Url")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Mark delivery receipts as read
     * @summary Mark delivery receipts as read
     * @param dateBefore DateBefore model
     * @param {*} [options] Override http request options.
     */
    VoiceApi.prototype.voiceReceiptsReadPut = function (dateBefore, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/voice/receipts-read';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(dateBefore, "DateBefore")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Send a voice call
     * @summary Send voice message(s)
     * @param voiceMessages VoiceMessageCollection model
     * @param {*} [options] Override http request options.
     */
    VoiceApi.prototype.voiceSendPost = function (voiceMessages, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/voice/send';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'voiceMessages' is not null or undefined
        if (voiceMessages === null || voiceMessages === undefined) {
            throw new Error('Required parameter voiceMessages was null or undefined when calling voiceSendPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(voiceMessages, "VoiceMessageCollection")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return VoiceApi;
}());
exports.VoiceApi = VoiceApi;
var VoiceDeliveryReceiptRulesApiApiKeys;
(function (VoiceDeliveryReceiptRulesApiApiKeys) {
})(VoiceDeliveryReceiptRulesApiApiKeys = exports.VoiceDeliveryReceiptRulesApiApiKeys || (exports.VoiceDeliveryReceiptRulesApiApiKeys = {}));
var VoiceDeliveryReceiptRulesApi = /** @class */ (function () {
    function VoiceDeliveryReceiptRulesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'BasicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(VoiceDeliveryReceiptRulesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VoiceDeliveryReceiptRulesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    VoiceDeliveryReceiptRulesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    VoiceDeliveryReceiptRulesApi.prototype.setApiKey = function (key, value) {
        this.authentications[VoiceDeliveryReceiptRulesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(VoiceDeliveryReceiptRulesApi.prototype, "username", {
        set: function (username) {
            this.authentications.BasicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VoiceDeliveryReceiptRulesApi.prototype, "password", {
        set: function (password) {
            this.authentications.BasicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Delete voice delivery receipt automation
     * @summary Delete voice delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    VoiceDeliveryReceiptRulesApi.prototype.voiceDeliveryReceiptAutomationDelete = function (receiptRuleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/voice/receipts/{receipt_rule_id}'
            .replace('{' + 'receipt_rule_id' + '}', encodeURIComponent(String(receiptRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'receiptRuleId' is not null or undefined
        if (receiptRuleId === null || receiptRuleId === undefined) {
            throw new Error('Required parameter receiptRuleId was null or undefined when calling voiceDeliveryReceiptAutomationDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get specific voice delivery receipt automation
     * @summary Get specific voice delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param {*} [options] Override http request options.
     */
    VoiceDeliveryReceiptRulesApi.prototype.voiceDeliveryReceiptAutomationGet = function (receiptRuleId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/voice/receipts/{receipt_rule_id}'
            .replace('{' + 'receipt_rule_id' + '}', encodeURIComponent(String(receiptRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'receiptRuleId' is not null or undefined
        if (receiptRuleId === null || receiptRuleId === undefined) {
            throw new Error('Required parameter receiptRuleId was null or undefined when calling voiceDeliveryReceiptAutomationGet.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Create voice delivery receipt automations
     * @summary Create voice delivery receipt automations
     * @param deliveryReceiptRule voice delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    VoiceDeliveryReceiptRulesApi.prototype.voiceDeliveryReceiptAutomationPost = function (deliveryReceiptRule, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/voice/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'deliveryReceiptRule' is not null or undefined
        if (deliveryReceiptRule === null || deliveryReceiptRule === undefined) {
            throw new Error('Required parameter deliveryReceiptRule was null or undefined when calling voiceDeliveryReceiptAutomationPost.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deliveryReceiptRule, "DeliveryReceiptRule")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Update voice delivery receipt automation
     * @summary Update voice delivery receipt automation
     * @param receiptRuleId Receipt rule id
     * @param deliveryReceiptRule Delivery receipt rule model
     * @param {*} [options] Override http request options.
     */
    VoiceDeliveryReceiptRulesApi.prototype.voiceDeliveryReceiptAutomationPut = function (receiptRuleId, deliveryReceiptRule, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/voice/receipts/{receipt_rule_id}'
            .replace('{' + 'receipt_rule_id' + '}', encodeURIComponent(String(receiptRuleId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'receiptRuleId' is not null or undefined
        if (receiptRuleId === null || receiptRuleId === undefined) {
            throw new Error('Required parameter receiptRuleId was null or undefined when calling voiceDeliveryReceiptAutomationPut.');
        }
        // verify required parameter 'deliveryReceiptRule' is not null or undefined
        if (deliveryReceiptRule === null || deliveryReceiptRule === undefined) {
            throw new Error('Required parameter deliveryReceiptRule was null or undefined when calling voiceDeliveryReceiptAutomationPut.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deliveryReceiptRule, "DeliveryReceiptRule")
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all voice delivery receipt automations
     * @summary Get all voice delivery receipt automations
     * @param q Your keyword or query.
     * @param page Page number
     * @param limit Number of records per page
     * @param {*} [options] Override http request options.
     */
    VoiceDeliveryReceiptRulesApi.prototype.voiceDeliveryReceiptAutomationsGet = function (q, page, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/automations/voice/receipts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "string");
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = ObjectSerializer.serialize(page, "number");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return VoiceDeliveryReceiptRulesApi;
}());
exports.VoiceDeliveryReceiptRulesApi = VoiceDeliveryReceiptRulesApi;
